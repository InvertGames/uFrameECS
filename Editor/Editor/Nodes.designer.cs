// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.uFrame.ECS {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Invert.Core;
    using Invert.Core.GraphDesigner;
    
    
    public class CustomActionNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Outputs", SectionVisibility.Always, OrderIndex=0, IsNewRow=true)]
        public virtual System.Collections.Generic.IEnumerable<OutputsChildItem> Outputs {
            get {
                return PersistedItems.OfType<OutputsChildItem>();
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Inputs", SectionVisibility.Always, OrderIndex=0, IsNewRow=true)]
        public virtual System.Collections.Generic.IEnumerable<InputsChildItem> Inputs {
            get {
                return PersistedItems.OfType<InputsChildItem>();
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Branches", SectionVisibility.Always, OrderIndex=0, IsNewRow=true)]
        public virtual System.Collections.Generic.IEnumerable<BranchesChildItem> Branches {
            get {
                return PersistedItems.OfType<BranchesChildItem>();
            }
        }
    }
    
    public partial interface ICustomActionConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class DataNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IDataConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class StringLiteralNodeBase : VariableNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IStringLiteralConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class PropertyNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        private string _SourceObjectInputSlotId;
        
        private string _SetInputSlotId;
        
        private SourceObject _SourceObject;
        
        private Set _Set;
        
        private string _GetOutputSlotId;
        
        private Get _Get;
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        [Invert.Json.JsonProperty()]
        public virtual string SourceObjectInputSlotId {
            get {
                if (_SourceObjectInputSlotId == null) {
                    _SourceObjectInputSlotId = Guid.NewGuid().ToString();
                }
                return _SourceObjectInputSlotId;
            }
            set {
                _SourceObjectInputSlotId = value;
            }
        }
        
        [Invert.Json.JsonProperty()]
        public virtual string SetInputSlotId {
            get {
                if (_SetInputSlotId == null) {
                    _SetInputSlotId = Guid.NewGuid().ToString();
                }
                return _SetInputSlotId;
            }
            set {
                _SetInputSlotId = value;
            }
        }
        
        [Invert.Core.GraphDesigner.InputSlot("SourceObject", false, SectionVisibility.Always, OrderIndex=0, IsNewRow=true)]
        public virtual SourceObject SourceObjectInputSlot {
            get {
                if (Repository == null) {
                    return null;
                }
                if (_SourceObject != null) {
                    return _SourceObject;
                }
                return _SourceObject ?? (_SourceObject = new SourceObject() { Repository = Repository, Node = this, Identifier = SourceObjectInputSlotId });
            }
        }
        
        [Invert.Core.GraphDesigner.InputSlot("Set", false, SectionVisibility.Always, OrderIndex=0, IsNewRow=true)]
        public virtual Set SetInputSlot {
            get {
                if (Repository == null) {
                    return null;
                }
                if (_Set != null) {
                    return _Set;
                }
                return _Set ?? (_Set = new Set() { Repository = Repository, Node = this, Identifier = SetInputSlotId });
            }
        }
        
        [Invert.Json.JsonProperty()]
        public virtual string GetOutputSlotId {
            get {
                if (_GetOutputSlotId == null) {
                    _GetOutputSlotId = Guid.NewGuid().ToString();
                }
                return _GetOutputSlotId;
            }
            set {
                _GetOutputSlotId = value;
            }
        }
        
        [Invert.Core.GraphDesigner.OutputSlot("Get", false, SectionVisibility.Always, OrderIndex=0, IsNewRow=false)]
        public virtual Get GetOutputSlot {
            get {
                if (Repository == null) {
                    return null;
                }
                if (_Get != null) {
                    return _Get;
                }
                return _Get ?? (_Get = new Get() { Repository = Repository, Node = this, Identifier = GetOutputSlotId });
            }
        }
    }
    
    public partial interface IPropertyConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class StringNodeBase : LiteralNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IStringConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class BoolNodeBase : LiteralNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IBoolConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class ModuleNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IModuleConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class VariableReferenceNodeBase : Invert.Core.GraphDesigner.GenericNode, IValueConnectable, IVariableConnectable {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IVariableReferenceConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class StopTimerNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        private string _TimerInputSlotId;
        
        private Timer _Timer;
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        [Invert.Json.JsonProperty()]
        public virtual string TimerInputSlotId {
            get {
                if (_TimerInputSlotId == null) {
                    _TimerInputSlotId = Guid.NewGuid().ToString();
                }
                return _TimerInputSlotId;
            }
            set {
                _TimerInputSlotId = value;
            }
        }
        
        [Invert.Core.GraphDesigner.InputSlot("Timer", false, SectionVisibility.Always, OrderIndex=0, IsNewRow=true)]
        public virtual Timer TimerInputSlot {
            get {
                if (Repository == null) {
                    return null;
                }
                if (_Timer != null) {
                    return _Timer;
                }
                return _Timer ?? (_Timer = new Timer() { Repository = Repository, Node = this, Identifier = TimerInputSlotId });
            }
        }
    }
    
    public partial interface IStopTimerConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class FloatNodeBase : LiteralNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IFloatConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class UserMethodNodeBase : SequenceItemNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IUserMethodConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class GetPropertyNodeBase : SequenceItemNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IGetPropertyConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class SetVariableNodeBase : SequenceItemNode {
        
        private string _VariableInputSlotId;
        
        private string _ValueInputSlotId;
        
        private Variable _Variable;
        
        private Value _Value;
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        [Invert.Json.JsonProperty()]
        public virtual string VariableInputSlotId {
            get {
                if (_VariableInputSlotId == null) {
                    _VariableInputSlotId = Guid.NewGuid().ToString();
                }
                return _VariableInputSlotId;
            }
            set {
                _VariableInputSlotId = value;
            }
        }
        
        [Invert.Json.JsonProperty()]
        public virtual string ValueInputSlotId {
            get {
                if (_ValueInputSlotId == null) {
                    _ValueInputSlotId = Guid.NewGuid().ToString();
                }
                return _ValueInputSlotId;
            }
            set {
                _ValueInputSlotId = value;
            }
        }
        
        [Invert.Core.GraphDesigner.InputSlot("Variable", false, SectionVisibility.Always, OrderIndex=0, IsNewRow=true)]
        public virtual Variable VariableInputSlot {
            get {
                if (Repository == null) {
                    return null;
                }
                if (_Variable != null) {
                    return _Variable;
                }
                return _Variable ?? (_Variable = new Variable() { Repository = Repository, Node = this, Identifier = VariableInputSlotId });
            }
        }
        
        [Invert.Core.GraphDesigner.InputSlot("Value", false, SectionVisibility.Always, OrderIndex=0, IsNewRow=true)]
        public virtual Value ValueInputSlot {
            get {
                if (Repository == null) {
                    return null;
                }
                if (_Value != null) {
                    return _Value;
                }
                return _Value ?? (_Value = new Value() { Repository = Repository, Node = this, Identifier = ValueInputSlotId });
            }
        }
    }
    
    public partial interface ISetVariableConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class PropertyChangedNodeBase : HandlerNode {
        
        private string _PropertyInputSlotId;
        
        private Property _Property;
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        [Invert.Json.JsonProperty()]
        public virtual string PropertyInputSlotId {
            get {
                if (_PropertyInputSlotId == null) {
                    _PropertyInputSlotId = Guid.NewGuid().ToString();
                }
                return _PropertyInputSlotId;
            }
            set {
                _PropertyInputSlotId = value;
            }
        }
        
        [Invert.Core.GraphDesigner.InputSlot("Property", false, SectionVisibility.WhenNodeIsNotFilter, OrderIndex=0, IsNewRow=true)]
        public virtual Property PropertyInputSlot {
            get {
                if (Repository == null) {
                    return null;
                }
                if (_Property != null) {
                    return _Property;
                }
                return _Property ?? (_Property = new Property() { Repository = Repository, Node = this, Identifier = PropertyInputSlotId });
            }
        }
    }
    
    public partial interface IPropertyChangedConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class VariableNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IVariableConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class GroupNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        public virtual System.Collections.Generic.IEnumerable<Invert.Core.IItem> PossibleRequire {
            get {
                return this.Repository.AllOf<IRequireConnectable>().Cast<IItem>();
            }
        }
        
        [Invert.Core.GraphDesigner.ReferenceSection("Require", SectionVisibility.Always, false, false, typeof(IRequireConnectable), false, OrderIndex=0, HasPredefinedOptions=false, IsNewRow=true)]
        public virtual System.Collections.Generic.IEnumerable<RequireReference> Require {
            get {
                return PersistedItems.OfType<RequireReference>();
            }
        }
    }
    
    public partial interface IGroupConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class Vector3NodeBase : LiteralNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IVector3Connectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class EventNodeBase : Invert.Core.GraphDesigner.GenericInheritableNode, Invert.Core.GraphDesigner.IClassTypeNode {
        
        public virtual string ClassName {
            get {
                return this.Name;
            }
        }
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Properties", SectionVisibility.Always, OrderIndex=0, IsNewRow=true)]
        public virtual System.Collections.Generic.IEnumerable<PropertiesChildItem> Properties {
            get {
                return PersistedItems.OfType<PropertiesChildItem>();
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Collections", SectionVisibility.Always, OrderIndex=0, IsNewRow=true)]
        public virtual System.Collections.Generic.IEnumerable<CollectionsChildItem> Collections {
            get {
                return PersistedItems.OfType<CollectionsChildItem>();
            }
        }
    }
    
    public partial interface IEventConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class LiteralNodeBase : VariableNode, IValueConnectable {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface ILiteralConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class ComponentNodeBase : Invert.Core.GraphDesigner.GenericNode, Invert.Core.GraphDesigner.IClassTypeNode, IRequireConnectable, IComponentsConnectable {
        
        public virtual string ClassName {
            get {
                return this.Name;
            }
        }
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Properties", SectionVisibility.Always, OrderIndex=0, IsNewRow=true)]
        public virtual System.Collections.Generic.IEnumerable<PropertiesChildItem> Properties {
            get {
                return PersistedItems.OfType<PropertiesChildItem>();
            }
        }
        
        [Invert.Core.GraphDesigner.Section("Collections", SectionVisibility.Always, OrderIndex=0, IsNewRow=true)]
        public virtual System.Collections.Generic.IEnumerable<CollectionsChildItem> Collections {
            get {
                return PersistedItems.OfType<CollectionsChildItem>();
            }
        }
    }
    
    public partial interface IComponentConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class IntNodeBase : LiteralNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IIntConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class Vector2NodeBase : LiteralNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IVector2Connectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class StartTimerNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        private string _TimerInputSlotId;
        
        private Timer _Timer;
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        [Invert.Json.JsonProperty()]
        public virtual string TimerInputSlotId {
            get {
                if (_TimerInputSlotId == null) {
                    _TimerInputSlotId = Guid.NewGuid().ToString();
                }
                return _TimerInputSlotId;
            }
            set {
                _TimerInputSlotId = value;
            }
        }
        
        [Invert.Core.GraphDesigner.InputSlot("Timer", false, SectionVisibility.Always, OrderIndex=0, IsNewRow=true)]
        public virtual Timer TimerInputSlot {
            get {
                if (Repository == null) {
                    return null;
                }
                if (_Timer != null) {
                    return _Timer;
                }
                return _Timer ?? (_Timer = new Timer() { Repository = Repository, Node = this, Identifier = TimerInputSlotId });
            }
        }
    }
    
    public partial interface IStartTimerConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class ActionNodeBase : SequenceItemNode, IActionConnectable {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IActionConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class HandlerNodeBase : SequenceItemNode, ISequenceItemConnectable {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IHandlerConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class SetPropertyNodeBase : SequenceItemNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface ISetPropertyConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class SystemNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        public virtual System.Collections.Generic.IEnumerable<Invert.Core.IItem> PossibleComponents {
            get {
                return this.Repository.AllOf<IComponentsConnectable>().Cast<IItem>();
            }
        }
        
        [Invert.Core.GraphDesigner.ReferenceSection("Components", SectionVisibility.Always, false, false, typeof(IComponentsConnectable), false, OrderIndex=0, HasPredefinedOptions=false, IsNewRow=false)]
        public virtual System.Collections.Generic.IEnumerable<ComponentsReference> Components {
            get {
                return PersistedItems.OfType<ComponentsReference>();
            }
        }
    }
    
    public partial interface ISystemConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class EntityNodeBase : Invert.Core.GraphDesigner.GenericNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
        
        public virtual System.Collections.Generic.IEnumerable<Invert.Core.IItem> PossibleComponents {
            get {
                return this.Repository.AllOf<IComponentsConnectable>().Cast<IItem>();
            }
        }
        
        [Invert.Core.GraphDesigner.ReferenceSection("Components", SectionVisibility.Always, false, false, typeof(IComponentsConnectable), false, OrderIndex=0, HasPredefinedOptions=false, IsNewRow=false)]
        public virtual System.Collections.Generic.IEnumerable<ComponentsReference> Components {
            get {
                return PersistedItems.OfType<ComponentsReference>();
            }
        }
    }
    
    public partial interface IEntityConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class ColorNodeBase : LiteralNode {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface IColorConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
    
    public class SequenceItemNodeBase : Invert.Core.GraphDesigner.GenericNode, ISequenceItemConnectable {
        
        public override bool AllowMultipleInputs {
            get {
                return true;
            }
        }
        
        public override bool AllowMultipleOutputs {
            get {
                return true;
            }
        }
    }
    
    public partial interface ISequenceItemConnectable : Invert.Core.GraphDesigner.IDiagramNodeItem, Invert.Core.GraphDesigner.IConnectable {
    }
}
