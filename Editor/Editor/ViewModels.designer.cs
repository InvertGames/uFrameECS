// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.uFrame.ECS {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    
    
    public class CustomActionNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public CustomActionNodeViewModelBase(CustomActionNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class DataNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public DataNodeViewModelBase(DataNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class LibraryNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public LibraryNodeViewModelBase(LibraryNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class StringLiteralNodeViewModelBase : VariableNodeViewModel {
        
        public StringLiteralNodeViewModelBase(StringLiteralNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class PropertyNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public PropertyNodeViewModelBase(PropertyNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class StringNodeViewModelBase : LiteralNodeViewModel {
        
        public StringNodeViewModelBase(StringNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class ActionGroupNodeViewModelBase : SequenceItemNodeViewModel {
        
        public ActionGroupNodeViewModelBase(ActionGroupNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class BoolNodeViewModelBase : LiteralNodeViewModel {
        
        public BoolNodeViewModelBase(BoolNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class ModuleNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public ModuleNodeViewModelBase(ModuleNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class StopTimerNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public StopTimerNodeViewModelBase(StopTimerNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class AllFalseNodeViewModelBase : BoolExpressionNodeViewModel {
        
        public AllFalseNodeViewModelBase(AllFalseNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class BoolExpressionNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public BoolExpressionNodeViewModelBase(BoolExpressionNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class FloatNodeViewModelBase : LiteralNodeViewModel {
        
        public FloatNodeViewModelBase(FloatNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class UserMethodNodeViewModelBase : SequenceItemNodeViewModel {
        
        public UserMethodNodeViewModelBase(UserMethodNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class LoopCollectionNodeViewModelBase : SequenceItemNodeViewModel {
        
        public LoopCollectionNodeViewModelBase(LoopCollectionNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class AnyFalseNodeViewModelBase : BoolExpressionNodeViewModel {
        
        public AnyFalseNodeViewModelBase(AnyFalseNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class ComponentCreatedNodeViewModelBase : HandlerNodeViewModel {
        
        public ComponentCreatedNodeViewModelBase(ComponentCreatedNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class SetVariableNodeViewModelBase : SequenceItemNodeViewModel {
        
        public SetVariableNodeViewModelBase(SetVariableNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class PropertyChangedNodeViewModelBase : HandlerNodeViewModel {
        
        public PropertyChangedNodeViewModelBase(PropertyChangedNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class VariableNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public VariableNodeViewModelBase(VariableNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class GroupNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public GroupNodeViewModelBase(GroupNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class Vector3NodeViewModelBase : LiteralNodeViewModel {
        
        public Vector3NodeViewModelBase(Vector3Node graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class EventNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public EventNodeViewModelBase(EventNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class LiteralNodeViewModelBase : VariableNodeViewModel {
        
        public LiteralNodeViewModelBase(LiteralNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class ComponentNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public ComponentNodeViewModelBase(ComponentNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class IntNodeViewModelBase : LiteralNodeViewModel {
        
        public IntNodeViewModelBase(IntNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class ComponentDestroyedNodeViewModelBase : HandlerNodeViewModel {
        
        public ComponentDestroyedNodeViewModelBase(ComponentDestroyedNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class Vector2NodeViewModelBase : LiteralNodeViewModel {
        
        public Vector2NodeViewModelBase(Vector2Node graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class AllTrueNodeViewModelBase : BoolExpressionNodeViewModel {
        
        public AllTrueNodeViewModelBase(AllTrueNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class StartTimerNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public StartTimerNodeViewModelBase(StartTimerNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class ConditionNodeViewModelBase : BoolExpressionNodeViewModel {
        
        public ConditionNodeViewModelBase(ConditionNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class ActionNodeViewModelBase : SequenceItemNodeViewModel {
        
        public ActionNodeViewModelBase(ActionNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class HandlerNodeViewModelBase : SequenceItemNodeViewModel {
        
        public HandlerNodeViewModelBase(HandlerNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class SystemNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public SystemNodeViewModelBase(SystemNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class EntityNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public EntityNodeViewModelBase(EntityNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class ColorNodeViewModelBase : LiteralNodeViewModel {
        
        public ColorNodeViewModelBase(ColorNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
    
    public class EnumValueNodeViewModelBase : LiteralNodeViewModel {
        
        public EnumValueNodeViewModelBase(EnumValueNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class AnyTrueNodeViewModelBase : BoolExpressionNodeViewModel {
        
        public AnyTrueNodeViewModelBase(AnyTrueNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class SequenceItemNodeViewModelBase : Invert.Core.GraphDesigner.GenericNodeViewModel<Invert.Core.GraphDesigner.GenericNode> {
        
        public SequenceItemNodeViewModelBase(SequenceItemNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Minimalistic;
            }
        }
    }
    
    public class CodeActionNodeViewModelBase : ActionNodeViewModel {
        
        public CodeActionNodeViewModelBase(CodeActionNode graphItemObject, Invert.Core.GraphDesigner.DiagramViewModel diagramViewModel) : 
                base(graphItemObject, diagramViewModel) {
        }
        
        public override Invert.Core.GraphDesigner.NodeStyle NodeStyle {
            get {
                return Invert.Core.GraphDesigner.NodeStyle.Normal;
            }
        }
    }
}
