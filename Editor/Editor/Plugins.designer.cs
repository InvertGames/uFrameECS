// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.uFrame.ECS {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Invert.Core;
    using Invert.Core.GraphDesigner;
    
    
    public class uFrameECSBase : Invert.Core.GraphDesigner.DiagramPlugin {
        
        private Invert.Core.GraphDesigner.NodeConfig<ComponentNode> _Component;
        
        private Invert.Core.GraphDesigner.NodeConfig<SystemNode> _System;
        
        private Invert.Core.GraphDesigner.NodeConfig<ItemTypesNode> _ItemTypes;
        
        private Invert.Core.GraphDesigner.NodeConfig<EventNode> _Event;
        
        private Invert.Core.GraphDesigner.NodeConfig<PublishNode> _Publish;
        
        private Invert.Core.GraphDesigner.NodeConfig<UserMethodNode> _UserMethod;
        
        private Invert.Core.GraphDesigner.NodeConfig<ConditionNode> _Condition;
        
        private Invert.Core.GraphDesigner.NodeConfig<LoopNode> _Loop;
        
        private Invert.Core.GraphDesigner.NodeConfig<IfNode> _If;
        
        private Invert.Core.GraphDesigner.NodeConfig<IfNotNode> _IfNot;
        
        private Invert.Core.GraphDesigner.NodeConfig<IsNullNode> _IsNull;
        
        private Invert.Core.GraphDesigner.NodeConfig<IsNotNullNode> _IsNotNull;
        
        private Invert.Core.GraphDesigner.NodeConfig<ActionNode> _Action;
        
        private Invert.Core.GraphDesigner.NodeConfig<MatcherNode> _Matcher;
        
        private Invert.Core.GraphDesigner.NodeConfig<MatchAllNode> _MatchAll;
        
        private Invert.Core.GraphDesigner.NodeConfig<MatchAnyNode> _MatchAny;
        
        private Invert.Core.GraphDesigner.NodeConfig<CustomMatcherNode> _CustomMatcher;
        
        private Invert.Core.GraphDesigner.NodeConfig<OnEventNode> _OnEvent;
        
        private Invert.Core.GraphDesigner.NodeConfig<EachComponentNode> _EachComponent;
        
        private Invert.Core.GraphDesigner.NodeConfig<ComponentGroupNode> _ComponentGroup;
        
        private Invert.Core.GraphDesigner.NodeConfig<AddComponentNode> _AddComponent;
        
        private Invert.Core.GraphDesigner.NodeConfig<RemoveComponentNode> _RemoveComponent;
        
        private Invert.Core.GraphDesigner.NodeConfig<ComponentFilterNode> _ComponentFilter;
        
        private Invert.Core.GraphDesigner.NodeConfig<EqualNode> _Equal;
        
        private Invert.Core.GraphDesigner.NodeConfig<FilterExpressionNode> _FilterExpression;
        
        private Invert.Core.GraphDesigner.NodeConfig<VariableNode> _Variable;
        
        private Invert.Core.GraphDesigner.NodeConfig<FilterNode> _Filter;
        
        private Invert.Core.GraphDesigner.NodeConfig<IntervalNode> _Interval;
        
        public Invert.Core.GraphDesigner.NodeConfig<ComponentNode> Component {
            get {
                return _Component;
            }
            set {
                _Component = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SystemNode> System {
            get {
                return _System;
            }
            set {
                _System = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ItemTypesNode> ItemTypes {
            get {
                return _ItemTypes;
            }
            set {
                _ItemTypes = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<EventNode> Event {
            get {
                return _Event;
            }
            set {
                _Event = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<PublishNode> Publish {
            get {
                return _Publish;
            }
            set {
                _Publish = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<UserMethodNode> UserMethod {
            get {
                return _UserMethod;
            }
            set {
                _UserMethod = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ConditionNode> Condition {
            get {
                return _Condition;
            }
            set {
                _Condition = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<LoopNode> Loop {
            get {
                return _Loop;
            }
            set {
                _Loop = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<IfNode> If {
            get {
                return _If;
            }
            set {
                _If = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<IfNotNode> IfNot {
            get {
                return _IfNot;
            }
            set {
                _IfNot = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<IsNullNode> IsNull {
            get {
                return _IsNull;
            }
            set {
                _IsNull = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<IsNotNullNode> IsNotNull {
            get {
                return _IsNotNull;
            }
            set {
                _IsNotNull = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ActionNode> Action {
            get {
                return _Action;
            }
            set {
                _Action = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<MatcherNode> Matcher {
            get {
                return _Matcher;
            }
            set {
                _Matcher = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<MatchAllNode> MatchAll {
            get {
                return _MatchAll;
            }
            set {
                _MatchAll = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<MatchAnyNode> MatchAny {
            get {
                return _MatchAny;
            }
            set {
                _MatchAny = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<CustomMatcherNode> CustomMatcher {
            get {
                return _CustomMatcher;
            }
            set {
                _CustomMatcher = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<OnEventNode> OnEvent {
            get {
                return _OnEvent;
            }
            set {
                _OnEvent = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<EachComponentNode> EachComponent {
            get {
                return _EachComponent;
            }
            set {
                _EachComponent = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ComponentGroupNode> ComponentGroup {
            get {
                return _ComponentGroup;
            }
            set {
                _ComponentGroup = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<AddComponentNode> AddComponent {
            get {
                return _AddComponent;
            }
            set {
                _AddComponent = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<RemoveComponentNode> RemoveComponent {
            get {
                return _RemoveComponent;
            }
            set {
                _RemoveComponent = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ComponentFilterNode> ComponentFilter {
            get {
                return _ComponentFilter;
            }
            set {
                _ComponentFilter = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<EqualNode> Equal {
            get {
                return _Equal;
            }
            set {
                _Equal = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<FilterExpressionNode> FilterExpression {
            get {
                return _FilterExpression;
            }
            set {
                _FilterExpression = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<VariableNode> Variable {
            get {
                return _Variable;
            }
            set {
                _Variable = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<FilterNode> Filter {
            get {
                return _Filter;
            }
            set {
                _Filter = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<IntervalNode> Interval {
            get {
                return _Interval;
            }
            set {
                _Interval = value;
            }
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetPropertiesSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetCollectionsSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public override void Initialize(Invert.IOC.UFrameContainer container) {
            container.RegisterInstance<IDocumentationProvider>(new uFrameECSDocumentationProvider(), "uFrameECS");
            container.AddItem<ComponentsReference>();
            container.AddItem<EventsReference>();
            container.RegisterInstance<IEditorCommand>(GetPropertiesSelectionCommand(), typeof(PropertiesChildItem).Name + "TypeSelection");;
            container.AddTypeItem<PropertiesChildItem>();
            container.RegisterInstance<IEditorCommand>(GetCollectionsSelectionCommand(), typeof(CollectionsChildItem).Name + "TypeSelection");;
            container.AddTypeItem<CollectionsChildItem>();
            container.AddItem<SignalsReference>();
            container.AddItem<NewSectionChildItem>();
            container.AddItem<MappingsReference>();
            container.AddItem<WithAnyReference>();
            container.AddItem<SelectReference>();
            Component = container.AddNode<ComponentNode,ComponentNodeViewModel,ComponentNodeDrawer>("Component");
            Component.Color(NodeColor.Orange);
            System = container.AddGraph<SystemGraph, SystemNode>("SystemGraph");
            System.Color(NodeColor.Black);
            System.HasSubNode<ComponentNode>();
            System.HasSubNode<EventNode>();
            System.HasSubNode<OnEventNode>();
            System.HasSubNode<ComponentGroupNode>();
            System.HasSubNode<ComponentFilterNode>();
            System.HasSubNode<FilterNode>();
            ItemTypes = container.AddNode<ItemTypesNode,ItemTypesNodeViewModel,ItemTypesNodeDrawer>("ItemTypes");
            ItemTypes.Color(NodeColor.Gray);
            Event = container.AddNode<EventNode,EventNodeViewModel,EventNodeDrawer>("Event");
            Event.Inheritable();
            Event.Color(NodeColor.Red);
            Event.HasSubNode<ComponentNode>();
            Event.HasSubNode<PublishNode>();
            Event.HasSubNode<UserMethodNode>();
            Event.HasSubNode<ConditionNode>();
            Event.HasSubNode<LoopNode>();
            Event.HasSubNode<IfNode>();
            Event.HasSubNode<IfNotNode>();
            Event.HasSubNode<IsNullNode>();
            Event.HasSubNode<IsNotNullNode>();
            Event.HasSubNode<ActionNode>();
            Event.HasSubNode<MatcherNode>();
            Event.HasSubNode<MatchAllNode>();
            Event.HasSubNode<MatchAnyNode>();
            Event.HasSubNode<CustomMatcherNode>();
            Publish = container.AddNode<PublishNode,PublishNodeViewModel,PublishNodeDrawer>("Publish");
            Publish.Color(NodeColor.Green);
            UserMethod = container.AddNode<UserMethodNode,UserMethodNodeViewModel,UserMethodNodeDrawer>("UserMethod");
            UserMethod.Color(NodeColor.Purple);
            Condition = container.AddNode<ConditionNode,ConditionNodeViewModel,ConditionNodeDrawer>("Condition");
            Condition.Color(NodeColor.Gray);
            Loop = container.AddNode<LoopNode,LoopNodeViewModel,LoopNodeDrawer>("Loop");
            Loop.Color(NodeColor.Orange);
            If = container.AddNode<IfNode,IfNodeViewModel,IfNodeDrawer>("If");
            If.Color(NodeColor.Gray);
            IfNot = container.AddNode<IfNotNode,IfNotNodeViewModel,IfNotNodeDrawer>("IfNot");
            IfNot.Color(NodeColor.Gray);
            IsNull = container.AddNode<IsNullNode,IsNullNodeViewModel,IsNullNodeDrawer>("IsNull");
            IsNull.Color(NodeColor.Gray);
            IsNotNull = container.AddNode<IsNotNullNode,IsNotNullNodeViewModel,IsNotNullNodeDrawer>("IsNotNull");
            IsNotNull.Color(NodeColor.Gray);
            Action = container.AddNode<ActionNode,ActionNodeViewModel,ActionNodeDrawer>("Action");
            Action.Color(NodeColor.Gray);
            Matcher = container.AddNode<MatcherNode,MatcherNodeViewModel,MatcherNodeDrawer>("Matcher");
            Matcher.Color(NodeColor.Gray);
            MatchAll = container.AddNode<MatchAllNode,MatchAllNodeViewModel,MatchAllNodeDrawer>("MatchAll");
            MatchAll.Color(NodeColor.Gray);
            MatchAny = container.AddNode<MatchAnyNode,MatchAnyNodeViewModel,MatchAnyNodeDrawer>("MatchAny");
            MatchAny.Color(NodeColor.Gray);
            CustomMatcher = container.AddNode<CustomMatcherNode,CustomMatcherNodeViewModel,CustomMatcherNodeDrawer>("CustomMatcher");
            CustomMatcher.Color(NodeColor.Purple);
            OnEvent = container.AddNode<OnEventNode,OnEventNodeViewModel,OnEventNodeDrawer>("OnEvent");
            OnEvent.Color(NodeColor.Red);
            OnEvent.HasSubNode<ComponentNode>();
            OnEvent.HasSubNode<EventNode>();
            OnEvent.HasSubNode<PublishNode>();
            OnEvent.HasSubNode<UserMethodNode>();
            OnEvent.HasSubNode<MatchAllNode>();
            OnEvent.HasSubNode<MatchAnyNode>();
            OnEvent.HasSubNode<CustomMatcherNode>();
            OnEvent.HasSubNode<EachComponentNode>();
            OnEvent.HasSubNode<ComponentGroupNode>();
            OnEvent.HasSubNode<AddComponentNode>();
            OnEvent.HasSubNode<RemoveComponentNode>();
            OnEvent.HasSubNode<IntervalNode>();
            EachComponent = container.AddNode<EachComponentNode,EachComponentNodeViewModel,EachComponentNodeDrawer>("EachComponent");
            EachComponent.Color(NodeColor.Gray);
            ComponentGroup = container.AddNode<ComponentGroupNode,ComponentGroupNodeViewModel,ComponentGroupNodeDrawer>("ComponentGroup");
            ComponentGroup.Color(NodeColor.Purple);
            ComponentGroup.HasSubNode<EqualNode>();
            ComponentGroup.HasSubNode<FilterExpressionNode>();
            ComponentGroup.HasSubNode<VariableNode>();
            AddComponent = container.AddNode<AddComponentNode,AddComponentNodeViewModel,AddComponentNodeDrawer>("AddComponent");
            AddComponent.Color(NodeColor.Gray);
            RemoveComponent = container.AddNode<RemoveComponentNode,RemoveComponentNodeViewModel,RemoveComponentNodeDrawer>("RemoveComponent");
            RemoveComponent.Color(NodeColor.Gray);
            ComponentFilter = container.AddNode<ComponentFilterNode,ComponentFilterNodeViewModel,ComponentFilterNodeDrawer>("ComponentFilter");
            ComponentFilter.Color(NodeColor.Gray);
            Equal = container.AddNode<EqualNode,EqualNodeViewModel,EqualNodeDrawer>("Equal");
            Equal.Color(NodeColor.Gray);
            FilterExpression = container.AddNode<FilterExpressionNode,FilterExpressionNodeViewModel,FilterExpressionNodeDrawer>("FilterExpression");
            FilterExpression.Color(NodeColor.Gray);
            Variable = container.AddNode<VariableNode,VariableNodeViewModel,VariableNodeDrawer>("Variable");
            Variable.Color(NodeColor.Gray);
            Filter = container.AddNode<FilterNode,FilterNodeViewModel,FilterNodeDrawer>("Filter");
            Filter.Color(NodeColor.Gray);
            Filter.HasSubNode<ComponentNode>();
            Filter.HasSubNode<OnEventNode>();
            Filter.HasSubNode<ComponentGroupNode>();
            Interval = container.AddNode<IntervalNode,IntervalNodeViewModel,IntervalNodeDrawer>("Interval");
            Interval.Color(NodeColor.Purple);
            container.Connectable<ComponentNode,ComponentsReference>();
            container.Connectable<ComponentNode,Component>();
            container.Connectable<ComponentNode,FilterBy>();
            container.Connectable<ComponentNode,SelectReference>();
            container.Connectable<ComponentNode,WithAnyReference>();
            container.Connectable<ComponentNode,OnEventNode>();
            container.Connectable<ComponentsReference,Variables>();
            container.Connectable<PropertiesChildItem,Variables>();
            container.Connectable<PropertiesChildItem,MappingsReference>();
            container.Connectable<CollectionsChildItem,Variables>();
            container.Connectable<Each,ActionNode>();
            container.Connectable<EventNode,Event>();
            container.Connectable<ActionNode,PublishNode>();
            container.Connectable<ActionNode,ActionNode>();
            container.Connectable<OnEventNode,ActionNode>();
            container.Connectable<ComponentGroupNode,FilterBy>();
            container.Connectable<ComponentGroupNode,ComponentsReference>();
            container.Connectable<ComponentGroupNode,WithAnyReference>();
            container.Connectable<ComponentGroupNode,SelectReference>();
            container.Connectable<ComponentGroupNode,OnEventNode>();
            container.Connectable<Filter,FilterExpressionNode>();
            container.Connectable<VariableNode,A>();
            container.Connectable<VariableNode,B>();
            container.Connectable<FilterNode,WithAnyReference>();
            container.Connectable<FilterNode,SelectReference>();
            container.Connectable<FilterNode,MappingsReference>();
            container.Connectable<FilterNode,OnEventNode>();
        }
    }
}
