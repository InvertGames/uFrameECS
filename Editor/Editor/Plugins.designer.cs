// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.uFrame.ECS {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Invert.Core;
    using Invert.Core.GraphDesigner;
    
    
    public class uFrameECSBase : Invert.Core.GraphDesigner.DiagramPlugin {
        
        private Invert.Core.GraphDesigner.NodeConfig<ComponentNode> _Component;
        
        private Invert.Core.GraphDesigner.NodeConfig<SystemNode> _System;
        
        private Invert.Core.GraphDesigner.NodeConfig<ItemTypesNode> _ItemTypes;
        
        private Invert.Core.GraphDesigner.NodeConfig<EventNode> _Event;
        
        private Invert.Core.GraphDesigner.NodeConfig<PublishNode> _Publish;
        
        private Invert.Core.GraphDesigner.NodeConfig<UserMethodNode> _UserMethod;
        
        private Invert.Core.GraphDesigner.NodeConfig<ActionNode> _Action;
        
        private Invert.Core.GraphDesigner.NodeConfig<HandlerNode> _Handler;
        
        private Invert.Core.GraphDesigner.NodeConfig<ComponentGroupNode> _ComponentGroup;
        
        private Invert.Core.GraphDesigner.NodeConfig<VariableNode> _Variable;
        
        private Invert.Core.GraphDesigner.NodeConfig<ContextNode> _Context;
        
        private Invert.Core.GraphDesigner.NodeConfig<TimerNode> _Timer;
        
        private Invert.Core.GraphDesigner.NodeConfig<StartTimerNode> _StartTimer;
        
        private Invert.Core.GraphDesigner.NodeConfig<StopTimerNode> _StopTimer;
        
        private Invert.Core.GraphDesigner.NodeConfig<ComponentsNode> _Components;
        
        private Invert.Core.GraphDesigner.NodeConfig<LiteralNode> _Literal;
        
        private Invert.Core.GraphDesigner.NodeConfig<StringLiteralNode> _StringLiteral;
        
        private Invert.Core.GraphDesigner.NodeConfig<SequenceItemNode> _SequenceItem;
        
        private Invert.Core.GraphDesigner.NodeConfig<VariableReferenceNode> _VariableReference;
        
        private Invert.Core.GraphDesigner.NodeConfig<Vector3Node> _Vector3;
        
        private Invert.Core.GraphDesigner.NodeConfig<Vector2Node> _Vector2;
        
        private Invert.Core.GraphDesigner.NodeConfig<StringNode> _String;
        
        private Invert.Core.GraphDesigner.NodeConfig<BoolNode> _Bool;
        
        private Invert.Core.GraphDesigner.NodeConfig<FloatNode> _Float;
        
        private Invert.Core.GraphDesigner.NodeConfig<IntNode> _Int;
        
        private Invert.Core.GraphDesigner.NodeConfig<ColorNode> _Color;
        
        private Invert.Core.GraphDesigner.NodeConfig<CustomActionNode> _CustomAction;
        
        private Invert.Core.GraphDesigner.NodeConfig<ActionLibraryNode> _ActionLibrary;
        
        private Invert.Core.GraphDesigner.NodeConfig<LibraryNode> _Library;
        
        private Invert.Core.GraphDesigner.NodeConfig<SetVariableNode> _SetVariable;
        
        public Invert.Core.GraphDesigner.NodeConfig<ComponentNode> Component {
            get {
                return _Component;
            }
            set {
                _Component = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SystemNode> System {
            get {
                return _System;
            }
            set {
                _System = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ItemTypesNode> ItemTypes {
            get {
                return _ItemTypes;
            }
            set {
                _ItemTypes = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<EventNode> Event {
            get {
                return _Event;
            }
            set {
                _Event = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<PublishNode> Publish {
            get {
                return _Publish;
            }
            set {
                _Publish = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<UserMethodNode> UserMethod {
            get {
                return _UserMethod;
            }
            set {
                _UserMethod = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ActionNode> Action {
            get {
                return _Action;
            }
            set {
                _Action = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<HandlerNode> Handler {
            get {
                return _Handler;
            }
            set {
                _Handler = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ComponentGroupNode> ComponentGroup {
            get {
                return _ComponentGroup;
            }
            set {
                _ComponentGroup = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<VariableNode> Variable {
            get {
                return _Variable;
            }
            set {
                _Variable = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ContextNode> Context {
            get {
                return _Context;
            }
            set {
                _Context = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<TimerNode> Timer {
            get {
                return _Timer;
            }
            set {
                _Timer = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<StartTimerNode> StartTimer {
            get {
                return _StartTimer;
            }
            set {
                _StartTimer = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<StopTimerNode> StopTimer {
            get {
                return _StopTimer;
            }
            set {
                _StopTimer = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ComponentsNode> Components {
            get {
                return _Components;
            }
            set {
                _Components = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<LiteralNode> Literal {
            get {
                return _Literal;
            }
            set {
                _Literal = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<StringLiteralNode> StringLiteral {
            get {
                return _StringLiteral;
            }
            set {
                _StringLiteral = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SequenceItemNode> SequenceItem {
            get {
                return _SequenceItem;
            }
            set {
                _SequenceItem = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<VariableReferenceNode> VariableReference {
            get {
                return _VariableReference;
            }
            set {
                _VariableReference = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<Vector3Node> Vector3 {
            get {
                return _Vector3;
            }
            set {
                _Vector3 = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<Vector2Node> Vector2 {
            get {
                return _Vector2;
            }
            set {
                _Vector2 = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<StringNode> String {
            get {
                return _String;
            }
            set {
                _String = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<BoolNode> Bool {
            get {
                return _Bool;
            }
            set {
                _Bool = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<FloatNode> Float {
            get {
                return _Float;
            }
            set {
                _Float = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<IntNode> Int {
            get {
                return _Int;
            }
            set {
                _Int = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ColorNode> Color {
            get {
                return _Color;
            }
            set {
                _Color = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<CustomActionNode> CustomAction {
            get {
                return _CustomAction;
            }
            set {
                _CustomAction = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ActionLibraryNode> ActionLibrary {
            get {
                return _ActionLibrary;
            }
            set {
                _ActionLibrary = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<LibraryNode> Library {
            get {
                return _Library;
            }
            set {
                _Library = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SetVariableNode> SetVariable {
            get {
                return _SetVariable;
            }
            set {
                _SetVariable = value;
            }
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetPropertiesSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetCollectionsSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetInputsSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetOutputsSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public override void Initialize(Invert.IOC.UFrameContainer container) {
            container.RegisterInstance<IDocumentationProvider>(new uFrameECSDocumentationProvider(), "uFrameECS");
            container.AddItem<ComponentsReference>();
            container.AddItem<EventsReference>();
            container.RegisterInstance<IEditorCommand>(GetPropertiesSelectionCommand(), typeof(PropertiesChildItem).Name + "TypeSelection");;
            container.AddTypeItem<PropertiesChildItem>();
            container.RegisterInstance<IEditorCommand>(GetCollectionsSelectionCommand(), typeof(CollectionsChildItem).Name + "TypeSelection");;
            container.AddTypeItem<CollectionsChildItem>();
            container.AddItem<SignalsReference>();
            container.AddItem<MappingsReference>();
            container.AddItem<WithAnyReference>();
            container.AddItem<SelectReference>();
            container.RegisterInstance<IEditorCommand>(GetInputsSelectionCommand(), typeof(InputsChildItem).Name + "TypeSelection");;
            container.AddTypeItem<InputsChildItem>();
            container.RegisterInstance<IEditorCommand>(GetOutputsSelectionCommand(), typeof(OutputsChildItem).Name + "TypeSelection");;
            container.AddTypeItem<OutputsChildItem>();
            container.AddItem<BranchesChildItem>();
            Component = container.AddNode<ComponentNode,ComponentNodeViewModel,ComponentNodeDrawer>("Component");
            Component.Color(NodeColor.Orange);
            System = container.AddGraph<SystemGraph, SystemNode>("SystemGraph");
            System.Color(NodeColor.Black);
            System.HasSubNode<ComponentNode>();
            System.HasSubNode<EventNode>();
            System.HasSubNode<HandlerNode>();
            System.HasSubNode<ComponentGroupNode>();
            System.HasSubNode<ContextNode>();
            System.HasSubNode<CustomActionNode>();
            ItemTypes = container.AddNode<ItemTypesNode,ItemTypesNodeViewModel,ItemTypesNodeDrawer>("ItemTypes");
            ItemTypes.Color(NodeColor.Gray);
            Event = container.AddNode<EventNode,EventNodeViewModel,EventNodeDrawer>("Event");
            Event.Inheritable();
            Event.Color(NodeColor.YellowGreen);
            Event.HasSubNode<ComponentNode>();
            Event.HasSubNode<PublishNode>();
            Event.HasSubNode<UserMethodNode>();
            Event.HasSubNode<ActionNode>();
            Publish = container.AddNode<PublishNode,PublishNodeViewModel,PublishNodeDrawer>("Publish");
            Publish.Color(NodeColor.Green);
            UserMethod = container.AddNode<UserMethodNode,UserMethodNodeViewModel,UserMethodNodeDrawer>("UserMethod");
            UserMethod.Color(NodeColor.Purple);
            Action = container.AddNode<ActionNode,ActionNodeViewModel,ActionNodeDrawer>("Action");
            Action.Color(NodeColor.Gray);
            Handler = container.AddNode<HandlerNode,HandlerNodeViewModel,HandlerNodeDrawer>("Handler");
            Handler.Color(NodeColor.Red);
            Handler.HasSubNode<ComponentNode>();
            Handler.HasSubNode<EventNode>();
            Handler.HasSubNode<PublishNode>();
            Handler.HasSubNode<UserMethodNode>();
            Handler.HasSubNode<LiteralNode>();
            Handler.HasSubNode<VariableReferenceNode>();
            Handler.HasSubNode<Vector3Node>();
            Handler.HasSubNode<Vector2Node>();
            Handler.HasSubNode<StringNode>();
            Handler.HasSubNode<BoolNode>();
            Handler.HasSubNode<FloatNode>();
            Handler.HasSubNode<IntNode>();
            Handler.HasSubNode<ColorNode>();
            Handler.HasSubNode<SetVariableNode>();
            ComponentGroup = container.AddNode<ComponentGroupNode,ComponentGroupNodeViewModel,ComponentGroupNodeDrawer>("ComponentGroup");
            ComponentGroup.Color(NodeColor.Purple);
            ComponentGroup.HasSubNode<VariableNode>();
            Variable = container.AddNode<VariableNode,VariableNodeViewModel,VariableNodeDrawer>("Variable");
            Variable.Color(NodeColor.Gray);
            Context = container.AddNode<ContextNode,ContextNodeViewModel,ContextNodeDrawer>("Context");
            Context.Color(NodeColor.Gray);
            Context.HasSubNode<ComponentNode>();
            Context.HasSubNode<VariableNode>();
            Context.HasSubNode<LiteralNode>();
            Context.HasSubNode<StringLiteralNode>();
            Timer = container.AddNode<TimerNode,TimerNodeViewModel,TimerNodeDrawer>("Timer");
            Timer.Color(NodeColor.Purple);
            StartTimer = container.AddNode<StartTimerNode,StartTimerNodeViewModel,StartTimerNodeDrawer>("StartTimer");
            StartTimer.Color(NodeColor.Gray);
            StopTimer = container.AddNode<StopTimerNode,StopTimerNodeViewModel,StopTimerNodeDrawer>("StopTimer");
            StopTimer.Color(NodeColor.Gray);
            Components = container.AddGraph<ComponentsGraph, ComponentsNode>("ComponentsGraph");
            Components.Color(NodeColor.Green);
            Components.HasSubNode<ComponentNode>();
            Components.HasSubNode<ContextNode>();
            Literal = container.AddNode<LiteralNode,LiteralNodeViewModel,LiteralNodeDrawer>("Literal");
            Literal.Color(NodeColor.Gray);
            StringLiteral = container.AddNode<StringLiteralNode,StringLiteralNodeViewModel,StringLiteralNodeDrawer>("StringLiteral");
            StringLiteral.Color(NodeColor.Gray);
            SequenceItem = container.AddNode<SequenceItemNode,SequenceItemNodeViewModel,SequenceItemNodeDrawer>("SequenceItem");
            SequenceItem.Color(NodeColor.Gray);
            VariableReference = container.AddNode<VariableReferenceNode,VariableReferenceNodeViewModel,VariableReferenceNodeDrawer>("VariableReference");
            VariableReference.Color(NodeColor.Green);
            Vector3 = container.AddNode<Vector3Node,Vector3NodeViewModel,Vector3NodeDrawer>("Vector3");
            Vector3.Color(NodeColor.DarkGray);
            Vector2 = container.AddNode<Vector2Node,Vector2NodeViewModel,Vector2NodeDrawer>("Vector2");
            Vector2.Color(NodeColor.DarkGray);
            String = container.AddNode<StringNode,StringNodeViewModel,StringNodeDrawer>("String");
            String.Color(NodeColor.DarkGray);
            Bool = container.AddNode<BoolNode,BoolNodeViewModel,BoolNodeDrawer>("Bool");
            Bool.Color(NodeColor.DarkGray);
            Float = container.AddNode<FloatNode,FloatNodeViewModel,FloatNodeDrawer>("Float");
            Float.Color(NodeColor.DarkGray);
            Int = container.AddNode<IntNode,IntNodeViewModel,IntNodeDrawer>("Int");
            Int.Color(NodeColor.DarkGray);
            Color = container.AddNode<ColorNode,ColorNodeViewModel,ColorNodeDrawer>("Color");
            Color.Color(NodeColor.DarkGray);
            CustomAction = container.AddNode<CustomActionNode,CustomActionNodeViewModel,CustomActionNodeDrawer>("CustomAction");
            CustomAction.Color(NodeColor.Blue);
            ActionLibrary = container.AddGraph<ActionLibraryGraph, ActionLibraryNode>("ActionLibraryGraph");
            ActionLibrary.Color(NodeColor.DarkDarkGray);
            Library = container.AddGraph<LibraryGraph, LibraryNode>("LibraryGraph");
            Library.Color(NodeColor.DarkDarkGray);
            Library.HasSubNode<EventNode>();
            Library.HasSubNode<CustomActionNode>();
            SetVariable = container.AddNode<SetVariableNode,SetVariableNodeViewModel,SetVariableNodeDrawer>("SetVariable");
            SetVariable.Color(NodeColor.Blue);
            container.Connectable<ComponentNode,ComponentsReference>();
            container.Connectable<ComponentNode,Component>();
            container.Connectable<ComponentNode,FilterBy>();
            container.Connectable<ComponentNode,SelectReference>();
            container.Connectable<ComponentNode,WithAnyReference>();
            container.Connectable<ComponentNode,HandlerNode>();
            container.Connectable<ComponentsReference,Variables>();
            container.Connectable<PropertiesChildItem,Variables>();
            container.Connectable<PropertiesChildItem,MappingsReference>();
            container.Connectable<CollectionsChildItem,Variables>();
            container.Connectable<Each,ActionNode>();
            container.Connectable<EventNode,Event>();
            container.Connectable<ActionNode,PublishNode>();
            container.Connectable<ActionNode,ActionNode>();
            container.Connectable<HandlerNode,SequenceItemNode>();
            container.Connectable<ComponentGroupNode,FilterBy>();
            container.Connectable<ComponentGroupNode,ComponentsReference>();
            container.Connectable<ComponentGroupNode,WithAnyReference>();
            container.Connectable<ComponentGroupNode,SelectReference>();
            container.Connectable<ComponentGroupNode,HandlerNode>();
            container.Connectable<ContextNode,WithAnyReference>();
            container.Connectable<ContextNode,SelectReference>();
            container.Connectable<ContextNode,MappingsReference>();
            container.Connectable<ContextNode,HandlerNode>();
            container.Connectable<TimerNode,Timer>();
            container.Connectable<LiteralNode,Value>();
            container.Connectable<SequenceItemNode,SequenceItemNode>();
            container.Connectable<VariableReferenceNode,Variable>();
            container.Connectable<VariableReferenceNode,Value>();
        }
    }
}
