// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Invert.uFrame.ECS {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using Invert.Core;
    using Invert.Core.GraphDesigner;
    
    
    public class uFrameECSBase : Invert.Core.GraphDesigner.DiagramPlugin {
        
        private Invert.Core.GraphDesigner.NodeConfig<ComponentNode> _Component;
        
        private Invert.Core.GraphDesigner.NodeConfig<SystemNode> _System;
        
        private Invert.Core.GraphDesigner.NodeConfig<FilterNode> _Filter;
        
        private Invert.Core.GraphDesigner.NodeConfig<RequireAllNode> _RequireAll;
        
        private Invert.Core.GraphDesigner.NodeConfig<RequireOneNode> _RequireOne;
        
        private Invert.Core.GraphDesigner.NodeConfig<ComponentFilterNode> _ComponentFilter;
        
        private Invert.Core.GraphDesigner.NodeConfig<ItemTypesNode> _ItemTypes;
        
        private Invert.Core.GraphDesigner.NodeConfig<OnEventNode> _OnEvent;
        
        private Invert.Core.GraphDesigner.NodeConfig<PublishNode> _Publish;
        
        private Invert.Core.GraphDesigner.NodeConfig<UserMethodNode> _UserMethod;
        
        public Invert.Core.GraphDesigner.NodeConfig<ComponentNode> Component {
            get {
                return _Component;
            }
            set {
                _Component = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<SystemNode> System {
            get {
                return _System;
            }
            set {
                _System = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<FilterNode> Filter {
            get {
                return _Filter;
            }
            set {
                _Filter = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<RequireAllNode> RequireAll {
            get {
                return _RequireAll;
            }
            set {
                _RequireAll = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<RequireOneNode> RequireOne {
            get {
                return _RequireOne;
            }
            set {
                _RequireOne = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ComponentFilterNode> ComponentFilter {
            get {
                return _ComponentFilter;
            }
            set {
                _ComponentFilter = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<ItemTypesNode> ItemTypes {
            get {
                return _ItemTypes;
            }
            set {
                _ItemTypes = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<OnEventNode> OnEvent {
            get {
                return _OnEvent;
            }
            set {
                _OnEvent = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<PublishNode> Publish {
            get {
                return _Publish;
            }
            set {
                _Publish = value;
            }
        }
        
        public Invert.Core.GraphDesigner.NodeConfig<UserMethodNode> UserMethod {
            get {
                return _UserMethod;
            }
            set {
                _UserMethod = value;
            }
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetPropertiesSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public virtual Invert.Core.GraphDesigner.SelectItemTypeCommand GetCollectionsSelectionCommand() {
            return new SelectItemTypeCommand() { IncludePrimitives = true, AllowNone = false };
        }
        
        public override void Initialize(Invert.IOC.UFrameContainer container) {
            container.RegisterInstance<IDocumentationProvider>(new uFrameECSDocumentationProvider(), "uFrameECS");
            container.AddItem<ComponentsReference>();
            container.AddItem<EventsReference>();
            container.RegisterInstance<IEditorCommand>(GetPropertiesSelectionCommand(), typeof(PropertiesChildItem).Name + "TypeSelection");;
            container.AddTypeItem<PropertiesChildItem>();
            container.RegisterInstance<IEditorCommand>(GetCollectionsSelectionCommand(), typeof(CollectionsChildItem).Name + "TypeSelection");;
            container.AddTypeItem<CollectionsChildItem>();
            container.AddItem<SignalsReference>();
            Component = container.AddNode<ComponentNode,ComponentNodeViewModel,ComponentNodeDrawer>("Component");
            Component.Color(NodeColor.Orange);
            System = container.AddGraph<SystemGraph, SystemNode>("SystemGraph");
            System.Color(NodeColor.Black);
            System.HasSubNode<ComponentNode>();
            System.HasSubNode<ComponentFilterNode>();
            System.HasSubNode<OnEventNode>();
            System.HasSubNode<PublishNode>();
            System.HasSubNode<UserMethodNode>();
            Filter = container.AddNode<FilterNode,FilterNodeViewModel,FilterNodeDrawer>("Filter");
            Filter.Color(NodeColor.Gray);
            RequireAll = container.AddNode<RequireAllNode,RequireAllNodeViewModel,RequireAllNodeDrawer>("RequireAll");
            RequireAll.Color(NodeColor.DarkDarkGray);
            RequireOne = container.AddNode<RequireOneNode,RequireOneNodeViewModel,RequireOneNodeDrawer>("RequireOne");
            RequireOne.Color(NodeColor.DarkDarkGray);
            ComponentFilter = container.AddNode<ComponentFilterNode,ComponentFilterNodeViewModel,ComponentFilterNodeDrawer>("ComponentFilter");
            ComponentFilter.Color(NodeColor.Gray);
            ItemTypes = container.AddNode<ItemTypesNode,ItemTypesNodeViewModel,ItemTypesNodeDrawer>("ItemTypes");
            ItemTypes.Color(NodeColor.Gray);
            OnEvent = container.AddNode<OnEventNode,OnEventNodeViewModel,OnEventNodeDrawer>("OnEvent");
            OnEvent.Color(NodeColor.Red);
            OnEvent.HasSubNode<ComponentNode>();
            OnEvent.HasSubNode<RequireAllNode>();
            OnEvent.HasSubNode<RequireOneNode>();
            OnEvent.HasSubNode<PublishNode>();
            Publish = container.AddNode<PublishNode,PublishNodeViewModel,PublishNodeDrawer>("Publish");
            Publish.Color(NodeColor.Green);
            UserMethod = container.AddNode<UserMethodNode,UserMethodNodeViewModel,UserMethodNodeDrawer>("UserMethod");
            UserMethod.Color(NodeColor.Purple);
            container.Connectable<ComponentNode,ComponentsReference>();
            container.Connectable<FilterNode,PublishNode>();
            container.Connectable<FilterNode,FilterNode>();
            container.Connectable<OnEventNode,FilterNode>();
            container.Connectable<OnEventNode,UserMethodNode>();
            container.Connectable<UserMethodNode,PublishNode>();
        }
    }
}
