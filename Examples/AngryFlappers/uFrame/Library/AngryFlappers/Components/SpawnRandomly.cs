// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.ECS;
using UnityEngine;
using UniRx;


public partial class SpawnRandomly : uFrame.ECS.EcsComponent {
    
    private Subject<Int32> _SecondsObservable;
    
    private Subject<Single> _MinYObservable;
    
    private Subject<Single> _MaxYObservable;
    
    private Subject<IDisposable> _TimerObservable;
    
    private Subject<String> _PoolNameObservable;
    
    private Subject<String> _PrefabNameObservable;
    
    private Subject<Vector3> _StartPositionObservable;
    
    [UnityEngine.SerializeField()]
    private Int32 _Seconds;
    
    [UnityEngine.SerializeField()]
    private Single _MinY;
    
    [UnityEngine.SerializeField()]
    private Single _MaxY;
    
    [UnityEngine.SerializeField()]
    private IDisposable _Timer;
    
    [UnityEngine.SerializeField()]
    private String _PoolName;
    
    [UnityEngine.SerializeField()]
    private String _PrefabName;
    
    [UnityEngine.SerializeField()]
    private Vector3 _StartPosition;
    
    public int ComponentID {
        get {
            return 12;
        }
    }
    
    public IObservable<Int32> SecondsObservable {
        get {
            if (_SecondsObservable == null) {
                _SecondsObservable = new Subject<Int32>();
            }
            return _SecondsObservable;
        }
    }
    
    public IObservable<Single> MinYObservable {
        get {
            if (_MinYObservable == null) {
                _MinYObservable = new Subject<Single>();
            }
            return _MinYObservable;
        }
    }
    
    public IObservable<Single> MaxYObservable {
        get {
            if (_MaxYObservable == null) {
                _MaxYObservable = new Subject<Single>();
            }
            return _MaxYObservable;
        }
    }
    
    public IObservable<IDisposable> TimerObservable {
        get {
            if (_TimerObservable == null) {
                _TimerObservable = new Subject<IDisposable>();
            }
            return _TimerObservable;
        }
    }
    
    public IObservable<String> PoolNameObservable {
        get {
            if (_PoolNameObservable == null) {
                _PoolNameObservable = new Subject<String>();
            }
            return _PoolNameObservable;
        }
    }
    
    public IObservable<String> PrefabNameObservable {
        get {
            if (_PrefabNameObservable == null) {
                _PrefabNameObservable = new Subject<String>();
            }
            return _PrefabNameObservable;
        }
    }
    
    public IObservable<Vector3> StartPositionObservable {
        get {
            if (_StartPositionObservable == null) {
                _StartPositionObservable = new Subject<Vector3>();
            }
            return _StartPositionObservable;
        }
    }
    
    public Int32 Seconds {
        get {
            return _Seconds;
        }
        set {
            if (_SecondsObservable != null) {
                _SecondsObservable.OnNext(value);
            }
            _Seconds = value;
        }
    }
    
    public Single MinY {
        get {
            return _MinY;
        }
        set {
            if (_MinYObservable != null) {
                _MinYObservable.OnNext(value);
            }
            _MinY = value;
        }
    }
    
    public Single MaxY {
        get {
            return _MaxY;
        }
        set {
            if (_MaxYObservable != null) {
                _MaxYObservable.OnNext(value);
            }
            _MaxY = value;
        }
    }
    
    public IDisposable Timer {
        get {
            return _Timer;
        }
        set {
            if (_TimerObservable != null) {
                _TimerObservable.OnNext(value);
            }
            _Timer = value;
        }
    }
    
    public String PoolName {
        get {
            return _PoolName;
        }
        set {
            if (_PoolNameObservable != null) {
                _PoolNameObservable.OnNext(value);
            }
            _PoolName = value;
        }
    }
    
    public String PrefabName {
        get {
            return _PrefabName;
        }
        set {
            if (_PrefabNameObservable != null) {
                _PrefabNameObservable.OnNext(value);
            }
            _PrefabName = value;
        }
    }
    
    public Vector3 StartPosition {
        get {
            return _StartPosition;
        }
        set {
            if (_StartPositionObservable != null) {
                _StartPositionObservable.OnNext(value);
            }
            _StartPosition = value;
        }
    }
}
