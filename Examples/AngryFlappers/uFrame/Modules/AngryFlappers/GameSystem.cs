// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.Kernel;
using uFrame.ECS;
using UniRx;


public partial class GameSystem : uFrame.ECS.EcsSystem {
    
    private FlappingBirdsContext _FlappingBirdsContext;
    
    private IEcsComponentManagerOf<Bird> _BirdManager;
    
    private IEcsComponentManagerOf<Deadly> _DeadlyManager;
    
    private IEcsComponentManagerOf<Flapping> _FlappingManager;
    
    private IEcsComponentManagerOf<DestroyOnPlay> _DestroyOnPlayManager;
    
    private IEcsComponentManagerOf<ResetPositionOnPlay> _ResetPositionOnPlayManager;
    
    private IEcsComponentManagerOf<ResetRotationOnPlay> _ResetRotationOnPlayManager;
    
    private IEcsComponentManagerOf<AngryFlappersGame> _AngryFlappersGameManager;
    
    private IEcsComponentManagerOf<SpawnRandomly> _SpawnRandomlyManager;
    
    private IEcsComponentManagerOf<Pipe> _PipeManager;
    
    private IEcsComponentManagerOf<DestroyOnGameOver> _DestroyOnGameOverManager;
    
    public FlappingBirdsContext FlappingBirdsContext {
        get {
            return _FlappingBirdsContext;
        }
        set {
            _FlappingBirdsContext = value;
        }
    }
    
    public IEcsComponentManagerOf<Bird> BirdManager {
        get {
            return _BirdManager;
        }
        set {
            _BirdManager = value;
        }
    }
    
    public IEcsComponentManagerOf<Deadly> DeadlyManager {
        get {
            return _DeadlyManager;
        }
        set {
            _DeadlyManager = value;
        }
    }
    
    public IEcsComponentManagerOf<Flapping> FlappingManager {
        get {
            return _FlappingManager;
        }
        set {
            _FlappingManager = value;
        }
    }
    
    public IEcsComponentManagerOf<DestroyOnPlay> DestroyOnPlayManager {
        get {
            return _DestroyOnPlayManager;
        }
        set {
            _DestroyOnPlayManager = value;
        }
    }
    
    public IEcsComponentManagerOf<ResetPositionOnPlay> ResetPositionOnPlayManager {
        get {
            return _ResetPositionOnPlayManager;
        }
        set {
            _ResetPositionOnPlayManager = value;
        }
    }
    
    public IEcsComponentManagerOf<ResetRotationOnPlay> ResetRotationOnPlayManager {
        get {
            return _ResetRotationOnPlayManager;
        }
        set {
            _ResetRotationOnPlayManager = value;
        }
    }
    
    public IEcsComponentManagerOf<AngryFlappersGame> AngryFlappersGameManager {
        get {
            return _AngryFlappersGameManager;
        }
        set {
            _AngryFlappersGameManager = value;
        }
    }
    
    public IEcsComponentManagerOf<SpawnRandomly> SpawnRandomlyManager {
        get {
            return _SpawnRandomlyManager;
        }
        set {
            _SpawnRandomlyManager = value;
        }
    }
    
    public IEcsComponentManagerOf<Pipe> PipeManager {
        get {
            return _PipeManager;
        }
        set {
            _PipeManager = value;
        }
    }
    
    public IEcsComponentManagerOf<DestroyOnGameOver> DestroyOnGameOverManager {
        get {
            return _DestroyOnGameOverManager;
        }
        set {
            _DestroyOnGameOverManager = value;
        }
    }
    
    public override void Setup() {
        base.Setup();
        BirdManager = ComponentSystem.RegisterComponent<Bird>();
        DeadlyManager = ComponentSystem.RegisterComponent<Deadly>();
        FlappingManager = ComponentSystem.RegisterComponent<Flapping>();
        DestroyOnPlayManager = ComponentSystem.RegisterComponent<DestroyOnPlay>();
        ResetPositionOnPlayManager = ComponentSystem.RegisterComponent<ResetPositionOnPlay>();
        ResetRotationOnPlayManager = ComponentSystem.RegisterComponent<ResetRotationOnPlay>();
        AngryFlappersGameManager = ComponentSystem.RegisterComponent<AngryFlappersGame>();
        SpawnRandomlyManager = ComponentSystem.RegisterComponent<SpawnRandomly>();
        PipeManager = ComponentSystem.RegisterComponent<Pipe>();
        DestroyOnGameOverManager = ComponentSystem.RegisterComponent<DestroyOnGameOver>();
        FlappingBirdsContext = new FlappingBirdsContext(this);
        this.OnEvent<GameOver>().Subscribe(_=>{ StopScrollersFilter(_); }).DisposeWith(this);
        this.OnEvent<BirdDied>().Subscribe(_=>{ TriggerGameOverFilter(_); }).DisposeWith(this);
        this.OnEvent<StartPlaying>().Subscribe(_=>{ BeginScrollingFilter(_); }).DisposeWith(this);
        this.OnEvent<StartPlaying>().Subscribe(_=>{ BeginFlappingFilter(_); }).DisposeWith(this);
        this.OnEvent<StartPlaying>().Subscribe(_=>{ ResetRotationsFilter(_); }).DisposeWith(this);
        this.OnEvent<StartPlaying>().Subscribe(_=>{ ResetPositionsFilter(_); }).DisposeWith(this);
        this.OnEvent<uFrame.Kernel.GameReadyEvent>().Subscribe(_=>{ GrabRotationsFilter(_); }).DisposeWith(this);
        this.OnEvent<uFrame.Kernel.GameReadyEvent>().Subscribe(_=>{ GrabPositionsFilter(_); }).DisposeWith(this);
        this.OnEvent<StartPlaying>().Subscribe(_=>{ StartTimersFilter(_); }).DisposeWith(this);
        this.OnEvent<GameOver>().Subscribe(_=>{ StopTimersFilter(_); }).DisposeWith(this);
        this.OnEvent<GameOver>().Subscribe(_=>{ DestroyStuffFilter(_); }).DisposeWith(this);
    }
    
    protected void StopScrollersHandler(GameOver data) {
        var GameOver = new StopScrollersHandler();
        GameOver.System = this;
        GameOver.Event = data;
        GameOver.Execute();
    }
    
    protected void StopScrollersFilter(GameOver data) {
        this.StopScrollersHandler(data);
    }
    
    protected void TriggerGameOverHandler(BirdDied data, FlappingBirds bird) {
        var BirdDied = new TriggerGameOverHandler();
        BirdDied.System = this;
        BirdDied.Event = data;
        BirdDied.Bird = bird;
        BirdDied.Execute();
    }
    
    protected void TriggerGameOverFilter(BirdDied data) {
        var BirdItem = FlappingBirdsContext.MatchAndSelect(data.Bird);
        if (BirdItem == null) {
            return;
        }
        this.TriggerGameOverHandler(data, BirdItem);
    }
    
    protected void BeginScrollingHandler(StartPlaying data) {
        var StartPlaying = new BeginScrollingHandler();
        StartPlaying.System = this;
        StartPlaying.Event = data;
        StartPlaying.Execute();
    }
    
    protected void BeginScrollingFilter(StartPlaying data) {
        this.BeginScrollingHandler(data);
    }
    
    protected void BeginFlappingHandler(StartPlaying data, Bird item) {
        var StartPlaying = new BeginFlappingHandler();
        StartPlaying.System = this;
        StartPlaying.Event = data;
        StartPlaying.Item = item;
        StartPlaying.Execute();
    }
    
    protected void BeginFlappingFilter(StartPlaying data) {
        if (BirdManager != null) {
            var e = BirdManager.Components.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                BeginFlappingHandler(data, e.Current);
            }
        }
    }
    
    protected void ResetRotationsHandler(StartPlaying data, ResetRotationOnPlay item) {
        var StartPlaying = new ResetRotationsHandler();
        StartPlaying.System = this;
        StartPlaying.Event = data;
        StartPlaying.Item = item;
        StartPlaying.Execute();
    }
    
    protected void ResetRotationsFilter(StartPlaying data) {
        if (ResetRotationOnPlayManager != null) {
            var e = ResetRotationOnPlayManager.Components.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                ResetRotationsHandler(data, e.Current);
            }
        }
    }
    
    protected void ResetPositionsHandler(StartPlaying data, ResetPositionOnPlay item) {
        var StartPlaying = new ResetPositionsHandler();
        StartPlaying.System = this;
        StartPlaying.Event = data;
        StartPlaying.Item = item;
        StartPlaying.Execute();
    }
    
    protected void ResetPositionsFilter(StartPlaying data) {
        if (ResetPositionOnPlayManager != null) {
            var e = ResetPositionOnPlayManager.Components.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                ResetPositionsHandler(data, e.Current);
            }
        }
    }
    
    protected void GrabRotationsHandler(GameReadyEvent data, ResetRotationOnPlay item) {
        var GameReadyEvent = new GrabRotationsHandler();
        GameReadyEvent.System = this;
        GameReadyEvent.Event = data;
        GameReadyEvent.Item = item;
        GameReadyEvent.Execute();
    }
    
    protected void GrabRotationsFilter(GameReadyEvent data) {
        if (ResetRotationOnPlayManager != null) {
            var e = ResetRotationOnPlayManager.Components.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                GrabRotationsHandler(data, e.Current);
            }
        }
    }
    
    protected void GrabPositionsHandler(GameReadyEvent data, ResetPositionOnPlay item) {
        var GameReadyEvent = new GrabPositionsHandler();
        GameReadyEvent.System = this;
        GameReadyEvent.Event = data;
        GameReadyEvent.Item = item;
        GameReadyEvent.Execute();
    }
    
    protected void GrabPositionsFilter(GameReadyEvent data) {
        if (ResetPositionOnPlayManager != null) {
            var e = ResetPositionOnPlayManager.Components.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                GrabPositionsHandler(data, e.Current);
            }
        }
    }
    
    protected void StartTimersHandler(StartPlaying data, SpawnRandomly item) {
        var StartPlaying = new StartTimersHandler();
        StartPlaying.System = this;
        StartPlaying.Event = data;
        StartPlaying.Item = item;
        StartPlaying.Execute();
    }
    
    protected void StartTimersFilter(StartPlaying data) {
        if (SpawnRandomlyManager != null) {
            var e = SpawnRandomlyManager.Components.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                StartTimersHandler(data, e.Current);
            }
        }
    }
    
    protected void StopTimersHandler(GameOver data, SpawnRandomly item) {
        var GameOver = new StopTimersHandler();
        GameOver.System = this;
        GameOver.Event = data;
        GameOver.Item = item;
        GameOver.Execute();
    }
    
    protected void StopTimersFilter(GameOver data) {
        if (SpawnRandomlyManager != null) {
            var e = SpawnRandomlyManager.Components.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                StopTimersHandler(data, e.Current);
            }
        }
    }
    
    protected void DestroyStuffHandler(GameOver data, DestroyOnGameOver item) {
        var GameOver = new DestroyStuffHandler();
        GameOver.System = this;
        GameOver.Event = data;
        GameOver.Item = item;
        GameOver.Execute();
    }
    
    protected void DestroyStuffFilter(GameOver data) {
        if (DestroyOnGameOverManager != null) {
            var e = DestroyOnGameOverManager.Components.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                DestroyStuffHandler(data, e.Current);
            }
        }
    }
}
