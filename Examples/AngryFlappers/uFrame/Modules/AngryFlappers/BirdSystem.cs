// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.Kernel;
using uFrame.ECS;
using UniRx;


public partial class BirdSystem : uFrame.ECS.EcsSystem {
    
    private FlappingBirdsContext _FlappingBirdsContext;
    
    private IEcsComponentManagerOf<Bird> _BirdManager;
    
    private IEcsComponentManagerOf<Deadly> _DeadlyManager;
    
    private IEcsComponentManagerOf<Flapping> _FlappingManager;
    
    private IEcsComponentManagerOf<DestroyOnPlay> _DestroyOnPlayManager;
    
    private IEcsComponentManagerOf<ResetPositionOnPlay> _ResetPositionOnPlayManager;
    
    private IEcsComponentManagerOf<ResetRotationOnPlay> _ResetRotationOnPlayManager;
    
    private IEcsComponentManagerOf<AngryFlappersGame> _AngryFlappersGameManager;
    
    private IEcsComponentManagerOf<SpawnRandomly> _SpawnRandomlyManager;
    
    private IEcsComponentManagerOf<Pipe> _PipeManager;
    
    private IEcsComponentManagerOf<DestroyOnGameOver> _DestroyOnGameOverManager;
    
    public FlappingBirdsContext FlappingBirdsContext {
        get {
            return _FlappingBirdsContext;
        }
        set {
            _FlappingBirdsContext = value;
        }
    }
    
    public IEcsComponentManagerOf<Bird> BirdManager {
        get {
            return _BirdManager;
        }
        set {
            _BirdManager = value;
        }
    }
    
    public IEcsComponentManagerOf<Deadly> DeadlyManager {
        get {
            return _DeadlyManager;
        }
        set {
            _DeadlyManager = value;
        }
    }
    
    public IEcsComponentManagerOf<Flapping> FlappingManager {
        get {
            return _FlappingManager;
        }
        set {
            _FlappingManager = value;
        }
    }
    
    public IEcsComponentManagerOf<DestroyOnPlay> DestroyOnPlayManager {
        get {
            return _DestroyOnPlayManager;
        }
        set {
            _DestroyOnPlayManager = value;
        }
    }
    
    public IEcsComponentManagerOf<ResetPositionOnPlay> ResetPositionOnPlayManager {
        get {
            return _ResetPositionOnPlayManager;
        }
        set {
            _ResetPositionOnPlayManager = value;
        }
    }
    
    public IEcsComponentManagerOf<ResetRotationOnPlay> ResetRotationOnPlayManager {
        get {
            return _ResetRotationOnPlayManager;
        }
        set {
            _ResetRotationOnPlayManager = value;
        }
    }
    
    public IEcsComponentManagerOf<AngryFlappersGame> AngryFlappersGameManager {
        get {
            return _AngryFlappersGameManager;
        }
        set {
            _AngryFlappersGameManager = value;
        }
    }
    
    public IEcsComponentManagerOf<SpawnRandomly> SpawnRandomlyManager {
        get {
            return _SpawnRandomlyManager;
        }
        set {
            _SpawnRandomlyManager = value;
        }
    }
    
    public IEcsComponentManagerOf<Pipe> PipeManager {
        get {
            return _PipeManager;
        }
        set {
            _PipeManager = value;
        }
    }
    
    public IEcsComponentManagerOf<DestroyOnGameOver> DestroyOnGameOverManager {
        get {
            return _DestroyOnGameOverManager;
        }
        set {
            _DestroyOnGameOverManager = value;
        }
    }
    
    public override void Setup() {
        base.Setup();
        BirdManager = ComponentSystem.RegisterComponent<Bird>();
        DeadlyManager = ComponentSystem.RegisterComponent<Deadly>();
        FlappingManager = ComponentSystem.RegisterComponent<Flapping>();
        DestroyOnPlayManager = ComponentSystem.RegisterComponent<DestroyOnPlay>();
        ResetPositionOnPlayManager = ComponentSystem.RegisterComponent<ResetPositionOnPlay>();
        ResetRotationOnPlayManager = ComponentSystem.RegisterComponent<ResetRotationOnPlay>();
        AngryFlappersGameManager = ComponentSystem.RegisterComponent<AngryFlappersGame>();
        SpawnRandomlyManager = ComponentSystem.RegisterComponent<SpawnRandomly>();
        PipeManager = ComponentSystem.RegisterComponent<Pipe>();
        DestroyOnGameOverManager = ComponentSystem.RegisterComponent<DestroyOnGameOver>();
        FlappingBirdsContext = new FlappingBirdsContext(this);
        EnsureDispatcherOnComponents<OnCollisionEnter2DDispatcher>( FlappingBirdsContext.SelectTypes );
        EnsureDispatcherOnComponents<OnCollisionEnter2DDispatcher>( typeof(Deadly) );
        this.OnEvent<uFrame.ECS.OnCollisionEnter2DDispatcher>().Subscribe(_=>{ PublishDeathFilter(_); }).DisposeWith(this);
        this.OnEvent<ComponentCreatedEvent>().Where(x=>x.Component is Pipe).Subscribe(_=>{ PipeCreatedFilter(_); }).DisposeWith(this);
    }
    
    public void Update() {
        if (FlappingBirdsContext != null) {
            var e = FlappingBirdsContext.Items.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                UpdateBirdHandler(e.Current);
            }
        }
    }
    
    protected void UpdateBirdHandler(FlappingBirds item) {
        var ISystemUpdate = new UpdateBirdHandler();
        ISystemUpdate.System = this;
        ISystemUpdate.Item = item;
        ISystemUpdate.Execute();
    }
    
    protected void PublishDeathHandler(OnCollisionEnter2DDispatcher data, FlappingBirds entityid, Deadly colliderid) {
        var OnCollisionEnter2DDispatcher = new PublishDeathHandler();
        OnCollisionEnter2DDispatcher.System = this;
        OnCollisionEnter2DDispatcher.Event = data;
        OnCollisionEnter2DDispatcher.EntityId = entityid;
        OnCollisionEnter2DDispatcher.ColliderId = colliderid;
        OnCollisionEnter2DDispatcher.Execute();
    }
    
    protected void PublishDeathFilter(OnCollisionEnter2DDispatcher data) {
        var EntityIdItem = FlappingBirdsContext.MatchAndSelect(data.EntityId);
        if (EntityIdItem == null) {
            return;
        }
        var ColliderIdDeadly = DeadlyManager[data.ColliderId];
        if (ColliderIdDeadly == null) {
            return;
        }
        this.PublishDeathHandler(data, EntityIdItem, ColliderIdDeadly);
    }
    
    protected void PipeCreatedHandler(ComponentCreatedEvent data, Pipe item) {
        var ComponentCreatedEvent = new PipeCreatedHandler();
        ComponentCreatedEvent.System = this;
        ComponentCreatedEvent.Event = data;
        ComponentCreatedEvent.Item = item;
        ComponentCreatedEvent.Execute();
    }
    
    protected void PipeCreatedFilter(ComponentCreatedEvent data) {
        this.PipeCreatedHandler(data, data.Component as Pipe);
    }
}
