// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.Kernel;
using UnityEngine;
using uFrame.ECS;


public class StopScrollersHandler : object {
    
    private GameOver _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    private bool PublishToggleScrollingAction_On = default( System.Boolean );
    
    private bool NewBoolNode1 = false;
    
    private PublishToggleScrollingAction eabccdfacec = new PublishToggleScrollingAction();
    
    public GameOver Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // Before visit PublishToggleScrollingAction
        PublishToggleScrollingAction_On = NewBoolNode1;
        // Visit PublishToggleScrollingAction
        eabccdfacec.On = NewBoolNode1;
        eabccdfacec.System = System;
        if (!eabccdfacec.Execute()) {
            return;
        }
        // CALL EXECUTE ON PublishToggleScrollingAction CLASS
        // HANDLER: StopScrollers
    }
}

public class UpdateBirdHandler : object {
    
    public FlappingBirds Item;
    
    private uFrame.ECS.ISystemUpdate _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    private Bird FlapBird_Bird = default( Bird );
    
    private FlapBird dddadecafdbcec = new FlapBird();
    
    public uFrame.ECS.ISystemUpdate Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // Before visit FlapBird
        FlapBird_Bird = Item.Bird;
        // Visit FlapBird
        dddadecafdbcec.Bird = Item.Bird;
        dddadecafdbcec.System = System;
        if (!dddadecafdbcec.Execute()) {
            return;
        }
        // CALL EXECUTE ON FlapBird CLASS
        // HANDLER: UpdateBird
    }
}

public class PublishDeathHandler : object {
    
    public FlappingBirds EntityId;
    
    public Deadly ColliderId;
    
    private uFrame.ECS.OnCollisionEnter2DDispatcher _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    private int PublishBirdDiedAction_Bird = default( System.Int32 );
    
    private PublishBirdDiedAction bcaabbafcee = new PublishBirdDiedAction();
    
    public uFrame.ECS.OnCollisionEnter2DDispatcher Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // Before visit PublishBirdDiedAction
        PublishBirdDiedAction_Bird = EntityId.Bird.EntityId;
        // Visit PublishBirdDiedAction
        bcaabbafcee.Bird = EntityId.Bird.EntityId;
        bcaabbafcee.System = System;
        if (!bcaabbafcee.Execute()) {
            return;
        }
        // CALL EXECUTE ON PublishBirdDiedAction CLASS
        // HANDLER: PublishDeath
    }
}

public class TriggerGameOverHandler : object {
    
    public FlappingBirds Bird;
    
    private BirdDied _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    private UnityEngine.MonoBehaviour DestroyLibrary_behaviour = default( UnityEngine.MonoBehaviour );
    
    private PublishGameOverAction bfebecdabb = new PublishGameOverAction();
    
    public BirdDied Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // Before visit uFrame.Actions.DestroyLibrary.DestroyComponent
        DestroyLibrary_behaviour = Bird.Flapping;
        // Visit uFrame.Actions.DestroyLibrary.DestroyComponent
        uFrame.Actions.DestroyLibrary.DestroyComponent(DestroyLibrary_behaviour);
        // Before visit PublishGameOverAction
        // Visit PublishGameOverAction
        bfebecdabb.System = System;
        if (!bfebecdabb.Execute()) {
            return;
        }
        // CALL EXECUTE ON PublishGameOverAction CLASS
        // HANDLER: TriggerGameOver
    }
}

public class BeginScrollingHandler : object {
    
    private StartPlaying _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    private bool PublishToggleScrollingAction_On = default( System.Boolean );
    
    private bool NewBoolNode3 = true;
    
    private PublishToggleScrollingAction cbfceaabab = new PublishToggleScrollingAction();
    
    public StartPlaying Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // Before visit PublishToggleScrollingAction
        PublishToggleScrollingAction_On = NewBoolNode3;
        // Visit PublishToggleScrollingAction
        cbfceaabab.On = NewBoolNode3;
        cbfceaabab.System = System;
        if (!cbfceaabab.Execute()) {
            return;
        }
        // CALL EXECUTE ON PublishToggleScrollingAction CLASS
        // HANDLER: BeginScrolling
    }
}

public class BeginFlappingHandler : object {
    
    public Bird Item;
    
    private StartPlaying _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    private uFrame.ECS.EcsComponent AddFlappingAction_Beside = default( uFrame.ECS.EcsComponent );
    
    private AddFlappingAction dffcdaffecdbb = new AddFlappingAction();
    
    public StartPlaying Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // Before visit AddFlappingAction
        AddFlappingAction_Beside = Item;
        // Visit AddFlappingAction
        dffcdaffecdbb.Beside = Item;
        dffcdaffecdbb.System = System;
        if (!dffcdaffecdbb.Execute()) {
            return;
        }
        // CALL EXECUTE ON AddFlappingAction CLASS
        // HANDLER: BeginFlapping
    }
}

public class ResetRotationsHandler : object {
    
    public ResetRotationOnPlay Item;
    
    private StartPlaying _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    private uFrame.ECS.Entity EntityTransform_entity = default( uFrame.ECS.Entity );
    
    private UnityEngine.Vector3 EntityTransform_rotation = default( UnityEngine.Vector3 );
    
    public StartPlaying Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // Before visit uFrame.Actions.EntityTransform.SetRotation
        EntityTransform_entity = Item.Entity;
        EntityTransform_rotation = Item.StartRotation;
        // Visit uFrame.Actions.EntityTransform.SetRotation
        uFrame.Actions.EntityTransform.SetRotation(EntityTransform_entity, EntityTransform_rotation);
        // HANDLER: ResetRotations
    }
}

public class ResetPositionsHandler : object {
    
    public ResetPositionOnPlay Item;
    
    private StartPlaying _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    private uFrame.ECS.Entity EntityTransform_entity = default( uFrame.ECS.Entity );
    
    private UnityEngine.Vector3 EntityTransform_position = default( UnityEngine.Vector3 );
    
    public StartPlaying Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // Before visit uFrame.Actions.EntityTransform.SetPosition
        EntityTransform_entity = Item.Entity;
        EntityTransform_position = Item.StartPosition;
        // Visit uFrame.Actions.EntityTransform.SetPosition
        uFrame.Actions.EntityTransform.SetPosition(EntityTransform_entity, EntityTransform_position);
        // HANDLER: ResetPositions
    }
}

public class GrabRotationsHandler : object {
    
    public ResetRotationOnPlay Item;
    
    private uFrame.Kernel.GameReadyEvent _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    private uFrame.ECS.Entity EntityTransform_entity = default( uFrame.ECS.Entity );
    
    private UnityEngine.Vector3 EntityTransform_GetRotation_Result = default( UnityEngine.Vector3 );
    
    public uFrame.Kernel.GameReadyEvent Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // Before visit uFrame.Actions.EntityTransform.GetRotation
        EntityTransform_entity = Item.Entity;
        // Visit uFrame.Actions.EntityTransform.GetRotation
        EntityTransform_GetRotation_Result = uFrame.Actions.EntityTransform.GetRotation(EntityTransform_entity);
        Item.StartRotation = EntityTransform_GetRotation_Result;
        // HANDLER: GrabRotations
    }
}

public class GrabPositionsHandler : object {
    
    public ResetPositionOnPlay Item;
    
    private uFrame.Kernel.GameReadyEvent _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    private uFrame.ECS.Entity EntityTransform_entity = default( uFrame.ECS.Entity );
    
    private UnityEngine.Vector3 EntityTransform_GetPosition_Result = default( UnityEngine.Vector3 );
    
    public uFrame.Kernel.GameReadyEvent Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // Before visit uFrame.Actions.EntityTransform.GetPosition
        EntityTransform_entity = Item.Entity;
        // Visit uFrame.Actions.EntityTransform.GetPosition
        EntityTransform_GetPosition_Result = uFrame.Actions.EntityTransform.GetPosition(EntityTransform_entity);
        Item.StartPosition = EntityTransform_GetPosition_Result;
        // HANDLER: GrabPositions
    }
}

public class StartTimersHandler : object {
    
    public SpawnRandomly Item;
    
    private StartPlaying _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    private int Interval_Minutes = default( System.Int32 );
    
    private int Interval_Seconds = default( System.Int32 );
    
    private uFrame.Actions.Interval fcafeaceeeeffeb = new uFrame.Actions.Interval();
    
    private System.IDisposable Interval_Result = default( System.IDisposable );
    
    private string Spawn_PoolName = default( System.String );
    
    private string Spawn_PrefabName = default( System.String );
    
    private UnityEngine.Vector3 Vector3Library_vector = default( UnityEngine.Vector3 );
    
    private float Vector3Library_GetIndices_x = default( System.Single );
    
    private float Vector3Library_GetIndices_y = default( System.Single );
    
    private float Vector3Library_GetIndices_z = default( System.Single );
    
    private float Vector3Library_x = default( System.Single );
    
    private float CreateRandoms_min = default( System.Single );
    
    private float CreateRandoms_max = default( System.Single );
    
    private float CreateRandoms_RandomFloat_Result = default( System.Single );
    
    private float Vector3Library_y = default( System.Single );
    
    private float Vector3Library_z = default( System.Single );
    
    private UnityEngine.Vector3 Vector3Library_Create_Result = default( UnityEngine.Vector3 );
    
    private UnityEngine.Vector3 Spawn_Position = default( UnityEngine.Vector3 );
    
    private UnityEngine.Vector3 Spawn_Rotation = default( UnityEngine.Vector3 );
    
    private uFrame.ECS.Spawn cdabafbdbae = new uFrame.ECS.Spawn();
    
    private uFrame.ECS.Entity Spawn_Result = default( uFrame.ECS.Entity );
    
    public StartPlaying Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // Before visit uFrame.Actions.Interval
        Interval_Seconds = Item.Seconds;
        // Visit uFrame.Actions.Interval
        fcafeaceeeeffeb.Seconds = Item.Seconds;
        fcafeaceeeeffeb.System = System;
        fcafeaceeeeffeb.Tick = Interval_Tick;
        if (!fcafeaceeeeffeb.Execute()) {
            return;
        }
        Interval_Result = fcafeaceeeeffeb.Result;
        // CALL EXECUTE ON Interval CLASS
        Item.Timer = Interval_Result;
        // HANDLER: StartTimers
    }
    
    private void Interval_Tick() {
        // Before visit uFrame.ECS.Spawn
        Spawn_PoolName = Item.PoolName;
        Spawn_PrefabName = Item.PrefabName;
        // Before visit uFrame.Actions.Vector3Library.Create
        // Before visit uFrame.Actions.Vector3Library.GetIndices
        Vector3Library_vector = Item.StartPosition;
        // Visit uFrame.Actions.Vector3Library.GetIndices
        uFrame.Actions.Vector3Library.GetIndices(Vector3Library_vector, out Vector3Library_GetIndices_x, out Vector3Library_GetIndices_y, out Vector3Library_GetIndices_z);
        Vector3Library_x = Vector3Library_GetIndices_x;
        // Before visit uFrame.Actions.CreateRandoms.RandomFloat
        CreateRandoms_min = Item.MinY;
        CreateRandoms_max = Item.MaxY;
        // Visit uFrame.Actions.CreateRandoms.RandomFloat
        CreateRandoms_RandomFloat_Result = uFrame.Actions.CreateRandoms.RandomFloat(CreateRandoms_min, CreateRandoms_max);
        Vector3Library_y = CreateRandoms_RandomFloat_Result;
        Vector3Library_z = Vector3Library_GetIndices_z;
        // Visit uFrame.Actions.Vector3Library.Create
        Vector3Library_Create_Result = uFrame.Actions.Vector3Library.Create(Vector3Library_x, Vector3Library_y, Vector3Library_z);
        Spawn_Position = Vector3Library_Create_Result;
        // Visit uFrame.ECS.Spawn
        cdabafbdbae.PoolName = Item.PoolName;
        cdabafbdbae.PrefabName = Item.PrefabName;
        cdabafbdbae.Position = Vector3Library_Create_Result;
        cdabafbdbae.System = System;
        if (!cdabafbdbae.Execute()) {
            return;
        }
        // CALL EXECUTE ON Spawn CLASS
    }
}

public class StopTimersHandler : object {
    
    public SpawnRandomly Item;
    
    private GameOver _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    private System.IDisposable DestroyLibrary_timer = default( System.IDisposable );
    
    public GameOver Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // Before visit uFrame.Actions.DestroyLibrary.DestroyTimer
        DestroyLibrary_timer = Item.Timer;
        // Visit uFrame.Actions.DestroyLibrary.DestroyTimer
        uFrame.Actions.DestroyLibrary.DestroyTimer(DestroyLibrary_timer);
        // HANDLER: StopTimers
    }
}

public class PipeCreatedHandler : object {
    
    public Pipe Item;
    
    private uFrame.ECS.ComponentCreatedEvent _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    public uFrame.ECS.ComponentCreatedEvent Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // HANDLER: PipeCreated
    }
}

public class DestroyStuffHandler : object {
    
    public DestroyOnGameOver Item;
    
    private GameOver _Event;
    
    private uFrame.ECS.EcsSystem _System;
    
    private int DestroyLibrary_entityId = default( System.Int32 );
    
    public GameOver Event {
        get {
            return _Event;
        }
        set {
            _Event = value;
        }
    }
    
    public uFrame.ECS.EcsSystem System {
        get {
            return _System;
        }
        set {
            _System = value;
        }
    }
    
    public virtual void Execute() {
        // Before visit uFrame.Actions.DestroyLibrary.DestroyEntity
        DestroyLibrary_entityId = Item.EntityId;
        // Visit uFrame.Actions.DestroyLibrary.DestroyEntity
        uFrame.Actions.DestroyLibrary.DestroyEntity(DestroyLibrary_entityId);
        // HANDLER: DestroyStuff
    }
}
