// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;
using uFrame.ECS;
using uFrame.Kernel;


public partial class ScrollSystem : uFrame.ECS.EcsSystem {
    
    private IEcsComponentManagerOf<Scroller> _ScrollerManager;
    
    private IEcsComponentManagerOf<DestroyWhenInvisible> _DestroyWhenInvisibleManager;
    
    private IEcsComponentManagerOf<ResetWhenInvisible> _ResetWhenInvisibleManager;
    
    public IEcsComponentManagerOf<Scroller> ScrollerManager {
        get {
            return _ScrollerManager;
        }
        set {
            _ScrollerManager = value;
        }
    }
    
    public IEcsComponentManagerOf<DestroyWhenInvisible> DestroyWhenInvisibleManager {
        get {
            return _DestroyWhenInvisibleManager;
        }
        set {
            _DestroyWhenInvisibleManager = value;
        }
    }
    
    public IEcsComponentManagerOf<ResetWhenInvisible> ResetWhenInvisibleManager {
        get {
            return _ResetWhenInvisibleManager;
        }
        set {
            _ResetWhenInvisibleManager = value;
        }
    }
    
    public override void Setup() {
        base.Setup();
        ScrollerManager = ComponentSystem.RegisterComponent<Scroller>();
        DestroyWhenInvisibleManager = ComponentSystem.RegisterComponent<DestroyWhenInvisible>();
        ResetWhenInvisibleManager = ComponentSystem.RegisterComponent<ResetWhenInvisible>();
        this.OnEvent<ToggleScrolling>().Subscribe(_=>{ ToggleScrollFilter(_); }).DisposeWith(this);
        EnsureDispatcherOnComponents<BecameInvisibleDispatcher>( typeof(DestroyWhenInvisible) );
        this.OnEvent<uFrame.ECS.BecameInvisibleDispatcher>().Subscribe(_=>{ DestroyItemsFilter(_); }).DisposeWith(this);
        EnsureDispatcherOnComponents<BecameInvisibleDispatcher>( typeof(ResetWhenInvisible) );
        this.OnEvent<uFrame.ECS.BecameInvisibleDispatcher>().Subscribe(_=>{ ResetItemFilter(_); }).DisposeWith(this);
        this.OnEvent<uFrame.Kernel.GameReadyEvent>().Subscribe(_=>{ TrackStartPositionFilter(_); }).DisposeWith(this);
    }
    
    public void Update() {
        if (ScrollerManager != null) {
            var e = ScrollerManager.Components.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                MoveInDirectionHandler(e.Current);
            }
        }
    }
    
    protected void MoveInDirectionHandler(Scroller item) {
        var ISystemUpdate = new MoveInDirectionHandler();
        ISystemUpdate.System = this;
        ISystemUpdate.Item = item;
        ISystemUpdate.Execute();
    }
    
    protected void ToggleScrollHandler(ToggleScrolling data, Scroller item) {
        var ToggleScrolling = new ToggleScrollHandler();
        ToggleScrolling.System = this;
        ToggleScrolling.Event = data;
        ToggleScrolling.Item = item;
        ToggleScrolling.Execute();
    }
    
    protected void ToggleScrollFilter(ToggleScrolling data) {
        if (ScrollerManager != null) {
            var e = ScrollerManager.Components.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                ToggleScrollHandler(data, e.Current);
            }
        }
    }
    
    protected void DestroyItemsHandler(BecameInvisibleDispatcher data, DestroyWhenInvisible entityid) {
        var BecameInvisibleDispatcher = new DestroyItemsHandler();
        BecameInvisibleDispatcher.System = this;
        BecameInvisibleDispatcher.Event = data;
        BecameInvisibleDispatcher.EntityId = entityid;
        BecameInvisibleDispatcher.Execute();
    }
    
    protected void DestroyItemsFilter(BecameInvisibleDispatcher data) {
        var EntityIdDestroyWhenInvisible = DestroyWhenInvisibleManager[data.EntityId];
        if (EntityIdDestroyWhenInvisible == null) {
            return;
        }
        this.DestroyItemsHandler(data, EntityIdDestroyWhenInvisible);
    }
    
    protected void ResetItemHandler(BecameInvisibleDispatcher data, ResetWhenInvisible entityid) {
        var BecameInvisibleDispatcher = new ResetItemHandler();
        BecameInvisibleDispatcher.System = this;
        BecameInvisibleDispatcher.Event = data;
        BecameInvisibleDispatcher.EntityId = entityid;
        BecameInvisibleDispatcher.Execute();
    }
    
    protected void ResetItemFilter(BecameInvisibleDispatcher data) {
        var EntityIdResetWhenInvisible = ResetWhenInvisibleManager[data.EntityId];
        if (EntityIdResetWhenInvisible == null) {
            return;
        }
        this.ResetItemHandler(data, EntityIdResetWhenInvisible);
    }
    
    protected void TrackStartPositionHandler(GameReadyEvent data, ResetWhenInvisible item) {
        var GameReadyEvent = new TrackStartPositionHandler();
        GameReadyEvent.System = this;
        GameReadyEvent.Event = data;
        GameReadyEvent.Item = item;
        GameReadyEvent.Execute();
    }
    
    protected void TrackStartPositionFilter(GameReadyEvent data) {
        if (ResetWhenInvisibleManager != null) {
            var e = ResetWhenInvisibleManager.Components.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                TrackStartPositionHandler(data, e.Current);
            }
        }
    }
}
