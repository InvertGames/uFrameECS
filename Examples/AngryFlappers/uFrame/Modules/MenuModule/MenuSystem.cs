// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using uFrame.Kernel;
using uFrame.ECS;
using UniRx;


public partial class MenuSystem : uFrame.ECS.EcsSystem {
    
    private IEcsComponentManagerOf<PlayButton> _PlayButtonManager;
    
    private IEcsComponentManagerOf<Menu> _MenuManager;
    
    public IEcsComponentManagerOf<PlayButton> PlayButtonManager {
        get {
            return _PlayButtonManager;
        }
        set {
            _PlayButtonManager = value;
        }
    }
    
    public IEcsComponentManagerOf<Menu> MenuManager {
        get {
            return _MenuManager;
        }
        set {
            _MenuManager = value;
        }
    }
    
    public override void Setup() {
        base.Setup();
        PlayButtonManager = ComponentSystem.RegisterComponent<PlayButton>();
        MenuManager = ComponentSystem.RegisterComponent<Menu>();
        EnsureDispatcherOnComponents<PointerClickDispatcher>( typeof(PlayButton) );
        this.OnEvent<uFrame.ECS.PointerClickDispatcher>().Subscribe(_=>{ PlayTheGameFilter(_); }).DisposeWith(this);
        this.OnEvent<StartPlaying>().Subscribe(_=>{ HideMenuFilter(_); }).DisposeWith(this);
        this.OnEvent<GameOver>().Subscribe(_=>{ ShowMenuFilter(_); }).DisposeWith(this);
    }
    
    protected void PlayTheGameHandler(PointerClickDispatcher data, PlayButton entityid) {
        var PointerClickDispatcher = new PlayTheGameHandler();
        PointerClickDispatcher.System = this;
        PointerClickDispatcher.Event = data;
        PointerClickDispatcher.EntityId = entityid;
        PointerClickDispatcher.Execute();
    }
    
    protected void PlayTheGameFilter(PointerClickDispatcher data) {
        var EntityIdPlayButton = PlayButtonManager[data.EntityId];
        if (EntityIdPlayButton == null) {
            return;
        }
        this.PlayTheGameHandler(data, EntityIdPlayButton);
    }
    
    protected void HideMenuHandler(StartPlaying data, Menu item) {
        var StartPlaying = new HideMenuHandler();
        StartPlaying.System = this;
        StartPlaying.Event = data;
        StartPlaying.Item = item;
        StartPlaying.Execute();
    }
    
    protected void HideMenuFilter(StartPlaying data) {
        if (MenuManager != null) {
            var e = MenuManager.Components.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                HideMenuHandler(data, e.Current);
            }
        }
    }
    
    protected void ShowMenuHandler(GameOver data, Menu item) {
        var GameOver = new ShowMenuHandler();
        GameOver.System = this;
        GameOver.Event = data;
        GameOver.Item = item;
        GameOver.Execute();
    }
    
    protected void ShowMenuFilter(GameOver data) {
        if (MenuManager != null) {
            var e = MenuManager.Components.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                ShowMenuHandler(data, e.Current);
            }
        }
    }
}
