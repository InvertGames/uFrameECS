// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;
using uFrame.Kernel;
using uFrame.ECS;


public partial class SelectablePlayersContext : Context<SelectablePlayersContextItem> {
    
    private Player _player;
    
    private Selectable _selectable;
    
    public SelectablePlayersContext(uFrame.ECS.EcsSystem system) : 
            base(system) {
    }
    
    protected override System.Collections.Generic.IEnumerable<uFrame.ECS.IEcsComponentManager> GetWithAnyManagers() {
        yield break;
    }
    
    protected override System.Collections.Generic.IEnumerable<uFrame.ECS.IEcsComponentManager> GetSelectManagers() {
        yield return ComponentSystem.RegisterComponent<Player>();
        yield return ComponentSystem.RegisterComponent<Selectable>();
        yield break;
    }
    
    public override bool Match(int entityId) {
        if (!ComponentSystem.TryGetComponent(entityId, out _player)) {
            return false;
        }
        if (!ComponentSystem.TryGetComponent(entityId, out _selectable)) {
            return false;
        }
        return true;
    }
    
    public override SelectablePlayersContextItem Select() {
        var item = new SelectablePlayersContextItem();
        item.Player = _player;
        item.Selectable = _selectable;
        return item;
    }
}

public partial class SelectablePlayersContextItem : uFrame.ECS.ContextItem {
    
    private Player _Player;
    
    private Selectable _Selectable;
    
    public Player Player {
        get {
            return _Player;
        }
        set {
            _Player = value;
        }
    }
    
    public Selectable Selectable {
        get {
            return _Selectable;
        }
        set {
            _Selectable = value;
        }
    }
}

public partial class RotatersContext : Context<RotatersContextItem> {
    
    private Rotater _rotater;
    
    public RotatersContext(uFrame.ECS.EcsSystem system) : 
            base(system) {
    }
    
    protected override System.Collections.Generic.IEnumerable<uFrame.ECS.IEcsComponentManager> GetWithAnyManagers() {
        yield break;
    }
    
    protected override System.Collections.Generic.IEnumerable<uFrame.ECS.IEcsComponentManager> GetSelectManagers() {
        yield return ComponentSystem.RegisterComponent<Rotater>();
        yield break;
    }
    
    public override bool Match(int entityId) {
        if (!ComponentSystem.TryGetComponent(entityId, out _rotater)) {
            return false;
        }
        return true;
    }
    
    public override RotatersContextItem Select() {
        var item = new RotatersContextItem();
        item.Rotater = _rotater;
        return item;
    }
}

public partial class RotatersContextItem : uFrame.ECS.ContextItem {
    
    private Rotater _Rotater;
    
    public Rotater Rotater {
        get {
            return _Rotater;
        }
        set {
            _Rotater = value;
        }
    }
}

public partial class DamageablesContext : Context<DamageablesContextItem> {
    
    private Damageable _damageable;
    
    public DamageablesContext(uFrame.ECS.EcsSystem system) : 
            base(system) {
    }
    
    protected override System.Collections.Generic.IEnumerable<uFrame.ECS.IEcsComponentManager> GetWithAnyManagers() {
        yield return ComponentSystem.RegisterComponent<Player>();
        yield return ComponentSystem.RegisterComponent<Rotater>();
        yield break;
    }
    
    protected override System.Collections.Generic.IEnumerable<uFrame.ECS.IEcsComponentManager> GetSelectManagers() {
        yield return ComponentSystem.RegisterComponent<Damageable>();
        yield break;
    }
    
    public override bool Match(int entityId) {
        if (!ComponentSystem.HasAny(entityId, WithAnyTypes)) {
            return false;
        }
        if (!ComponentSystem.TryGetComponent(entityId, out _damageable)) {
            return false;
        }
        return true;
    }
    
    public override DamageablesContextItem Select() {
        var item = new DamageablesContextItem();
        item.Damageable = _damageable;
        return item;
    }
}

public partial class DamageablesContextItem : uFrame.ECS.ContextItem {
    
    private Damageable _Damageable;
    
    public Damageable Damageable {
        get {
            return _Damageable;
        }
        set {
            _Damageable = value;
        }
    }
}
