// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UniRx;
using uFrame.ECS;
using uFrame.Kernel;


public class RotaterSystemBase : uFrame.ECS.EcsSystem {
    
    private SelectablePlayersContext _SelectablePlayersContext;
    
    private RotatersContext _RotatersContext;
    
    private DamageablesContext _DamageablesContext;
    
    private IEcsComponentManagerOf<Rotater> _RotaterManager;
    
    private IEcsComponentManagerOf<Selectable> _SelectableManager;
    
    private IEcsComponentManagerOf<Player> _PlayerManager;
    
    private IEcsComponentManagerOf<Damageable> _DamageableManager;
    
    public SelectablePlayersContext SelectablePlayersContext {
        get {
            return _SelectablePlayersContext;
        }
        set {
            _SelectablePlayersContext = value;
        }
    }
    
    public RotatersContext RotatersContext {
        get {
            return _RotatersContext;
        }
        set {
            _RotatersContext = value;
        }
    }
    
    public DamageablesContext DamageablesContext {
        get {
            return _DamageablesContext;
        }
        set {
            _DamageablesContext = value;
        }
    }
    
    public IEcsComponentManagerOf<Rotater> RotaterManager {
        get {
            return _RotaterManager;
        }
        set {
            _RotaterManager = value;
        }
    }
    
    public IEcsComponentManagerOf<Selectable> SelectableManager {
        get {
            return _SelectableManager;
        }
        set {
            _SelectableManager = value;
        }
    }
    
    public IEcsComponentManagerOf<Player> PlayerManager {
        get {
            return _PlayerManager;
        }
        set {
            _PlayerManager = value;
        }
    }
    
    public IEcsComponentManagerOf<Damageable> DamageableManager {
        get {
            return _DamageableManager;
        }
        set {
            _DamageableManager = value;
        }
    }
    
    public override void Setup() {
        base.Setup();
        RotaterManager = ComponentSystem.RegisterComponent<Rotater>();
        SelectableManager = ComponentSystem.RegisterComponent<Selectable>();
        PlayerManager = ComponentSystem.RegisterComponent<Player>();
        DamageableManager = ComponentSystem.RegisterComponent<Damageable>();
        SelectablePlayersContext = new SelectablePlayersContext(this);
        RotatersContext = new RotatersContext(this);
        DamageablesContext = new DamageablesContext(this);
        EnsureDispatcherOnComponents<OnMouseDownDispatcher>( SelectablePlayersContext.WithAnyTypes );
        this.OnEvent<OnMouseDownDispatcher>().Subscribe(_=>{ OnMouseDownFilter(_); }).DisposeWith(this);
        EnsureDispatcherOnComponents<OnCollisionEnterDispatcher>( DamageablesContext.WithAnyTypes );
        EnsureDispatcherOnComponents<OnCollisionEnterDispatcher>( DamageablesContext.WithAnyTypes );
        this.OnEvent<OnCollisionEnterDispatcher>().Subscribe(_=>{ OnCollisionEnterFilter(_); }).DisposeWith(this);
    }
    
    protected void OnUpdateHandler(RotatersContextItem item) {
        // OnUpdate
        // Rotate
        this.Rotate(item);
    }
    
    protected virtual void Rotate(RotatersContextItem item) {
    }
    
    public void Update() {
        var e = RotatersContext.Items.GetEnumerator();
        for (
        ; e.MoveNext(); 
        ) {
            OnUpdateHandler(e.Current);
        }
    }
    
    protected void OnMouseDownHandler(SelectablePlayersContextItem item) {
        // OnMouseDown
        // MakeRotater
        this.MakeRotater(item);
    }
    
    protected void OnMouseDownFilter(OnMouseDownDispatcher data) {
        var entityIdItem = SelectablePlayersContext.MatchAndSelect(data.EntityId);
        if (entityIdItem== null) {
            return;
        }
        this.OnMouseDownHandler(entityIdItem);
    }
    
    protected virtual void MakeRotater(SelectablePlayersContextItem item) {
    }
    
    protected void OnCollisionEnterHandler(DamageablesContextItem entityidItem, DamageablesContextItem collideridItem) {
        // OnCollisionEnter
        // ApplyDamage
        this.ApplyDamage(entityidItem, collideridItem);
    }
    
    protected void OnCollisionEnterFilter(OnCollisionEnterDispatcher data) {
        var EntityIdItem = DamageablesContext.MatchAndSelect(data.EntityId);
        if (EntityIdItem == null) {
            return;
        }
        var ColliderIdItem = DamageablesContext.MatchAndSelect(data.ColliderId);
        if (ColliderIdItem == null) {
            return;
        }
        this.OnCollisionEnterHandler(EntityIdItem, ColliderIdItem);
    }
    
    protected virtual void ApplyDamage(DamageablesContextItem entityidItem, DamageablesContextItem collideridItem) {
    }
}
